import h5py
import  ipdb
import numpy as np
from pylayers.antprop.channel import *
from pylayers.util.project import *
import pylayers.util.pyutil as pyu
import ConfigParser

"""

Module to handle scanner data stored and exploited
in hdf5 format.
Authors : M.D.BALDE and B.UGUEN

.. currentmodule:: pylayers.measures.exploith5

.. autosummary::
    :toctree: generated

mesh5 Class
===========

.. autosummary::
    :toctree: generated/

    mesh5.__init__
    mesh5.__repr__
    mesh5.readcal
    mesh5.read
    mesh5.calibrate
    mesh5.saveini

"""


class mesh5(PyLayers):
    """
    """
    def __init__(self,_filename):
        """
        """
        if '.h5' not in _filename:
            _filename = _filename+'.h5'
        self._filename = _filename 
        self.filename = pyu.getlong(self._filename,pstruc['DIRMES'])
        #self.read()

    def __repr__(self):
        """
        """
        st = ''
        st = st + '-----------------------\n'
        st = st + '      Parameters       \n'
        st = st + '-----------------------\n'
        st = st + 'Directory  : '+ str(self.filename) +'\n'
        st = st + '-----------------------\n'
        f  = h5py.File(self.filename,'r')
        ke = f.keys() 
        for k in ke:
            st = st + k + '\n' 
            for ja in f[k].attrs.keys(): 
                st = st + ' ' + ja + ' : ' +  str(f[k].attrs[ja])+ '  '
            st = st+'\n'
            if 'mes' not in k: 
                try:
                    for jb in f[k]:
                        st = st +'\t\t' + jb + '\t'
                        for jba in f[k][jb].attrs.keys():
                            st = st + str(f[k][jb].attrs[jba])+ '\t'
                        st = st+'\n'
                        try:
                            for jc in f[k][jb]:
                                st = st +'\t\t' + jb + '\t' + jc + '\t'
                                for jca in f[k][jb][jc].attrs.keys():
                                    st = st + str(f[k][jb][jc].attrs[jca])+ '\t'
                                st = st+'\n'
                        except:
                            st = st+'\n'
                # for jb in range(len(f[k])):
                #     st = st +'\t\t' + str(jb+1) + '\t'
                #     for jba in f[k][str(jb+1)].attrs.keys():
                #         st = st + str(f[k][str(jb+1)].attrs[jba])+ '\t'
                #     st = st+'\n'
                #     try:
                #         for jc in range(len(f[k][str(jb+1)])):
                #             st = st +'\t\t' + str(jb+1) + '\t' + str(jc+1) + '\t'
                #             for jca in f[k][str(jb+1)][str(jc+1)].attrs.keys():
                #                 st = st + str(f[k][str(jb+1)][str(jc+1)].attrs[jca])+ '\t'
                #             st = st+'\n'
                #     except:
                #         st = st+'\n'

                except:
                    st = st+'\n'
        f.close()
        #st = st + 'File  : '+ str(self.f) +'\n'

        return(st)

    #def readcal(self,ical=1,mode='r'):
        #""" read calibration files
        #Parameters
        #----------

        #ical : int 
            #calibration index

        #"""
        #k = "cal"+str(ical)
        #self.f  = h5py.File(self.filename,mode)
        #exp ="self.dcal={}"
        #exec(exp)
        #exp ="self.dcal['fminGHz'] =self.f['"+k+"'].attrs['fminGHz']"
        #exec(exp)
        #exp ="self.dcal['fmaxGHz'] =self.f['"+k+"'].attrs['fmaxGHz']"
        #exec(exp)
        #exp ="self.dcal['Nf'] =self.f['"+k+"'].attrs['Nf']"
        #exec(exp)
        #exp ="self.dcal['ifbHz'] =self.f['"+k+"'].attrs['ifbHz']"
        #exec(exp)
        #exp ="self.dcal['cables'] =self.f['"+k+"'].attrs['cables']"
        #exec(exp)
        #exp ="self.dcal['Navrg'] =self.f['"+k+"'].attrs['Navrg']"
        #exec(exp)
        #exp ="self.dcal['comment'] =self.f['"+k+"'].attrs['comment']"
        #exec(exp)
        #exp ="self.dcal['author'] =self.f['"+k+"'].attrs['author']"
        #exec(exp)
        #exp ="self.dcal['time'] =self.f['"+k+"'].attrs['time']"
        #exec(exp)
        #exp ="self.dcal['param'] =self.f['"+k+"'].attrs['param']"
        #exec(exp)
        #exec("fminGHz=self.dcal['fminGHz']")
        #exec("fmaxGHz=self.dcal['fmaxGHz']")
        #exec("Nf=self.dcal['Nf']")
        #self.fGHz = np.linspace(fminGHz,fmaxGHz,Nf)
        #exp ="self.cal=Tchannel(x=self.fGHz,y=np.array(self.f['"+k+"']))"
        #exec(exp)
        #self.f.close()

    def readcal(self,gcal=1,ical=1):
        """ read calibration files

        Parameters
        ----------

        gcal : int
            calibration group index
        ical : int
            calibration index

        """

        self.f  = h5py.File(self.filename,'r')
       
        k = "cal"+str(gcal)
        self.dcal  = dict(zip(self.f[k].attrs.keys(),self.f[k].attrs.values()))
        di = dict(zip(self.f[k][str(ical)].attrs.keys(),self.f[k][str(ical)].attrs.values()))
        self.dcal.update(di)
        fminGHz = self.dcal['fminGHz']
        fmaxGHz = self.dcal['fmaxGHz']
        Nf = self.dcal['Nf']
        self.fGHz = np.linspace(fminGHz,fmaxGHz,Nf)
        self.cal = Tchannel(x=self.fGHz,y=np.array(self.f[k][str(ical)]))
        self.f.close()

   

    def read(self,k,ix,calibrate=True):
        """ read measure

        Parameters
        ----------

        k : group key to read
        ix : list
        calibrate : boolean

        """
        self.f = h5py.File(self.filename,'r')
        gcal = eval(self.f[k].attrs['gcal'].replace('cal',''))
        ical = eval(self.f[k].attrs['ical'])
        self.dmes = dict(zip(self.f[k].attrs.keys(),self.f[k].attrs.values()))
        self.f.close()
        
        self.readcal(gcal=gcal,ical=ical)
        
        self.f = h5py.File(self.filename,'r')

        self.mes = Tchannel(x=self.fGHz,y=np.array(self.f[k][str(ix[0])][str(ix[1])][str(ix[2])][str(ix[3])]))
        self.pt  = self.f[k][str(ix[0])][str(ix[1])][str(ix[2])][str(ix[3])].attrs['pt']


    def calibrate(self):
        """
        Parameters
        ----------

        """
        if 'mes' in self.__dict__:
            if self.mes.calibrated==False:
                self.mes.y = self.mes.y/np.mean(self.cal.y,axis=0)
                self.mes.calibrated=True
            else:
                self.mes.y = self.mes.y*np.mean(self.cal.y,axis=0)
                self.mes.calibrated=False
        else:
            print "read data first"


        # for iR in range(self.Nr):
        #     for iT in range(self.Nt):
        #         if cmd == 'MIMO':
        #             if 'mimomes' in self.__dict__:
        #                 if self.calibrated==False:
        #                     self.mimomes.y = self.mimomes.y[iR,iT,:]/np.mean(self.mimocal.y[iR,iT,:],axis=0)
        #                     self.calibrated=True
        #                 else:
        #                     self.mimomes.y = self.mimomes.y[iR,iT,:]*np.mean(self.mimocal.y[iR,iT,:],axis=0)
        #                     self.calibrated=False
        #             else:
        #                 print "read data first"


    def open(self,mode='r'):
        """

        Parameters
        ----------

        mode : string

        """
        filename = pyu.getlong(self._filename,pstruc['DIRMES'])
        self.f  = h5py.File(filename,mode)


#    def open(self,key,mode='r'):
#        """
#        Parameters
#        ----------
#
#        key : data key to read
#        mode : string
#
#        """
#        filename = pyu.getlong(self._filename,pstruc['DIRMES'])
#        self.f  = h5py.File(filename,mode)
#        lkeys = self.f.keys()
#        for k in lkeys:
#            exp ="self.d"+k+"={}"
#            exec(exp)
#            exp ="self.d"+k+"['fminGHz'] =self.f['"+k+"'].attrs['fminGHz']"
#            exec(exp)
#            exp ="self.d"+k+"['fmaxGHz'] =self.f['"+k+"'].attrs['fmaxGHz']"
#            exec(exp)
#            exp ="self.d"+k+"['Nf'] =self.f['"+k+"'].attrs['Nf']"
#            exec(exp)
#            exp ="self.d"+k+"['ifbHz'] =self.f['"+k+"'].attrs['ifbHz']"
#            exec(exp)
#            exp ="self.d"+k+"['cables'] =self.f['"+k+"'].attrs['cables']"
#            exec(exp)
#            exp ="self.d"+k+"['Navrg'] =self.f['"+k+"'].attrs['Navrg']"
#            exec(exp)
#            exp ="self.d"+k+"['comment'] =self.f['"+k+"'].attrs['comment']"
#            exec(exp)
#            exp ="self.d"+k+"['author'] =self.f['"+k+"'].attrs['author']"
#            exec(exp)
#            exp ="self.d"+k+"['time'] =self.f['"+k+"'].attrs['time']"
#            exec(exp)
#            exp ="self.d"+k+"['param'] =self.f['"+k+"'].attrs['param']"
#            exec(exp)
#            exec('fminGHz=self.d'+k+"['fminGHz']")
#            exec('fmaxGHz=self.d'+k+"['fmaxGHz']")
#            exec('Nf=self.d'+k+"['Nf']")
#            fGHz =  np.linspace(fminGHz,fmaxGHz,Nf)
#            exp ="self."+k+"=Tchannel(x=fGHz,y=np.array(self.f['"+k+"']))"
#            exec(exp)
#
    def close(self):
        """ close h5 file
        """
        self.f.close()

    def saveini(self,_fileini='vna_config.ini'):
        """ save calibration parameters in .ini file

        Parameters
        ----------

        _fileini  : string
            calibration ini file
        ical : int
            calibration number
        """

        dcal = self.dcal
        config = ConfigParser.ConfigParser()

        # stimulus section
        config.add_section("stimulus")
        config.set("stimulus",'fminghz',dcal['fminGHz'])
        config.set("stimulus",'fmaxghz',dcal['fmaxGHz'])
        config.set("stimulus",'nf',dcal['Nf'])

        # response section
        config.add_section("response")
        config.set("response",'param',dcal['param'])
        config.set("response",'average','on')
        config.set("response",'navrg',dcal['Navrg'])
        config.set("response",'ifbhz',dcal['ifbHz'])
        config.set("response",'win',1)

        fileini = pyu.getlong(_fileini,pstruc['DIRMES'])
        fd = open(fileini,"w")
        config.write(fd)
        fd.close()

    def showcal(self,mes='mes1',lg=[]):
        """show calibration from vna
   
        Parameters
        ----------


        """
        
        self.read(mes,lg)
        plt.ion()
        self.mes.plot()
        cir = self.mes.ift(ffts=1)
        self.mes.show()
        cir.plot()        
        plt.show()

if __name__=='__main__':
    doctest.testmod()
    #mesh5(sdata.h5)
