import h5py
import  pdb
import numpy as np
from pylayers.antprop.channel import *
from pylayers.util.project import *
import pylayers.util.pyutil as pyu
import ConfigParser

"""
Module to handle scanner data stored and exploited 
in hdf5 format.
Authors : M.D.BALDE and B.UGUEN

.. currentmodule:: pylayers.measures.exploith5

.. autosummary::
    :toctree: generated

mesh5 Class
===========

.. autosummary::
    :toctree: generated/

    mesh5.__init__
    mesh5.__repr__
    mesh5.readcal
    mesh5.read
    mesh5.calibrate
    mesh5.saveini

"""


class mesh5(PyLayers):
    """
    """
    def __init__(self,_filename):
        """
        """
        self._filename = _filename
        self.filename = pyu.getlong(self._filename,pstruc['DIRMES'])
        self.calibrated = False
        #self.read()

    def __repr__(self):
        """
        """

        st = ''
        st = st + '-----------------------\n'
        st = st + '      Parameters       \n'
        st = st + '-----------------------\n'
        st = st + 'calibrated : '+ str(self.calibrated) +'\n'
        st = st + 'Repertory  : '+ str(self.filename) +'\n'
        #st = st + 'File  : '+ str(self.f) +'\n'
        
        return(st)

    def readcal(self,ical=1,mode='r'):
        """ read calibration files
        
        Parameters
        ----------

        ical : int 
            calibration index

        """
        k = "cal"+str(ical)
        self.f  = h5py.File(self.filename,mode)
        exp ="self.dcal={}"
        exec(exp)
        exp ="self.dcal['fminGHz'] =self.f['"+k+"'].attrs['fminGHz']"
        exec(exp)
        exp ="self.dcal['fmaxGHz'] =self.f['"+k+"'].attrs['fmaxGHz']"
        exec(exp)
        exp ="self.dcal['Nf'] =self.f['"+k+"'].attrs['Nf']"
        exec(exp)
        exp ="self.dcal['ifbHz'] =self.f['"+k+"'].attrs['ifbHz']"
        exec(exp)
        exp ="self.dcal['cables'] =self.f['"+k+"'].attrs['cables']"
        exec(exp)
        exp ="self.dcal['Navrg'] =self.f['"+k+"'].attrs['Navrg']"
        exec(exp)
        exp ="self.dcal['comment'] =self.f['"+k+"'].attrs['comment']"
        exec(exp)
        exp ="self.dcal['author'] =self.f['"+k+"'].attrs['author']"
        exec(exp)
        exp ="self.dcal['time'] =self.f['"+k+"'].attrs['time']"
        exec(exp)
        exp ="self.dcal['param'] =self.f['"+k+"'].attrs['param']"
        exec(exp)
        exec("fminGHz=self.dcal['fminGHz']")
        exec("fmaxGHz=self.dcal['fmaxGHz']")
        exec("Nf=self.dcal['Nf']")
        self.fGHz = np.linspace(fminGHz,fmaxGHz,Nf)
        exp ="self.cal=Tchannel(x=self.fGHz,y=np.array(self.f['"+k+"']))"
        exec(exp)
        self.f.close()

    def read(self,k,kcal,mode='r',calibrate=True):
        """
        Parameters
        ----------

        k : data key to read
        kcal : data key for calibration
        mode : string

        """
        self.readcal(kcal)
        self.f  = h5py.File(self.filename,mode)
        exp ="self.dmes={}"
        exec(exp)
        exp ="self.dmes['comment'] = self.f['"+k+"'].attrs['comment']"
        exec(exp)
        exp ="self.dmes['author'] = self.f['"+k+"'].attrs['author']"
        exec(exp)
        exp ="self.dmes['time'] = self.f['"+k+"'].attrs['time']"
        exec(exp)
        exp ="self.dmes['axes'] = self.f['"+k+"'].attrs['axes']"
        exec(exp)
        exp ="self.dmes['Nmeas'] = self.f['"+k+"'].attrs['Nmeas']"
        exec(exp)
        #exp ="self.dmes['Nmeas'] = self.f['"+k+"'].attrs['Nmeas']"
        #exec(exp)
        exp ="self.mes=Tchannel(x=self.fGHz,y=np.array(self.f['"+k+"']))"
        exec(exp)
        self.f.close()
        if calibrate:
            self.calibrate()

    def calibrate(self):
        if 'mes' in self.__dict__:
            if self.calibrated==False:
                self.mes.y = self.mes.y/np.mean(self.cal.y,axis=0)
                self.calibrated=True
            else:
                self.mes.y = self.mes.y*np.mean(self.cal.y,axis=0)
                self.calibrated=False
        else:
            print "read data first"


    def open(self,mode='r'):
        """
        Parameters
        ----------
        mode : string

        """
        filename = pyu.getlong(self._filename,pstruc['DIRMES'])
        self.f  = h5py.File(filename,mode)        


#    def open(self,key,mode='r'):
#        """
#        Parameters
#        ----------
#
#        key : data key to read
#        mode : string
#
#        """
#        filename = pyu.getlong(self._filename,pstruc['DIRMES'])
#        self.f  = h5py.File(filename,mode)
#        lkeys = self.f.keys()
#        for k in lkeys:
#            exp ="self.d"+k+"={}"
#            exec(exp)
#            exp ="self.d"+k+"['fminGHz'] =self.f['"+k+"'].attrs['fminGHz']"
#            exec(exp)
#            exp ="self.d"+k+"['fmaxGHz'] =self.f['"+k+"'].attrs['fmaxGHz']"
#            exec(exp)
#            exp ="self.d"+k+"['Nf'] =self.f['"+k+"'].attrs['Nf']"
#            exec(exp)
#            exp ="self.d"+k+"['ifbHz'] =self.f['"+k+"'].attrs['ifbHz']"
#            exec(exp)
#            exp ="self.d"+k+"['cables'] =self.f['"+k+"'].attrs['cables']"
#            exec(exp)
#            exp ="self.d"+k+"['Navrg'] =self.f['"+k+"'].attrs['Navrg']"
#            exec(exp)
#            exp ="self.d"+k+"['comment'] =self.f['"+k+"'].attrs['comment']"
#            exec(exp)
#            exp ="self.d"+k+"['author'] =self.f['"+k+"'].attrs['author']"
#            exec(exp)
#            exp ="self.d"+k+"['time'] =self.f['"+k+"'].attrs['time']"
#            exec(exp)
#            exp ="self.d"+k+"['param'] =self.f['"+k+"'].attrs['param']"
#            exec(exp)
#            exec('fminGHz=self.d'+k+"['fminGHz']")
#            exec('fmaxGHz=self.d'+k+"['fmaxGHz']")
#            exec('Nf=self.d'+k+"['Nf']")
#            fGHz =  np.linspace(fminGHz,fmaxGHz,Nf)
#            exp ="self."+k+"=Tchannel(x=fGHz,y=np.array(self.f['"+k+"']))"
#            exec(exp)
#
    def close(self):
        """ close h5 file
        """
        self.f.close()

    def saveini(self,_fileini='vna_config.ini'):
        """ save calibration parameters in .ini file

        Parameters
        ----------

        _fileini  : string
            calibration ini file
        ical : int
            calibration number
        """
        exec('dcal=self.dcal')
        config = ConfigParser.ConfigParser()

        # stimulus section
        config.add_section("stimulus")
        config.set("stimulus",'fminghz',dcal['fminGHz'])
        config.set("stimulus",'fmaxghz',dcal['fmaxGHz'])
        config.set("stimulus",'nf',dcal['Nf'])

        # response section
        config.add_section("response")
        config.set("response",'param',dcal['param'])
        config.set("response",'average','on')
        #config.set("response",'navrg',dcal['Navrg'])
        #config.set("response",'ifbhz',dcal['ifbHz'])
        config.set("response",'win',1)

        #conf_201_1 section
        config.add_section("conf_201_1")
        config.set("conf_201_1",'nf',dcal['Nf'])
        config.set("conf_201_1",'ifbhz',dcal['ifbHz'])
        #config.set("conf_201_1",'navrg',dcal['Navrg'])

        #conf_401_1 section
        config.add_section("conf_401_1")
        config.set("conf_401_1",'nf',dcal['Nf'])
        config.set("conf_401_1",'ifbhz',dcal['ifbHz'])
        #config.set("conf_401_1",'navrg',dcal['Navrg'])

        #conf_801_1 section
        config.add_section("conf_801_1")
        config.set("conf_801_1",'nf',dcal['Nf'])
        config.set("conf_801_1",'ifbhz',dcal['ifbHz'])
        #config.set("conf_801_1",'navrg',dcal['Navrg'])

        #conf_1601_1 section
        config.add_section("conf_1601_1")
        config.set("conf_1601_1",'nf',dcal['Nf'])
        config.set("conf_1601_1",'ifbhz',dcal['ifbHz'])
        #config.set("conf_1601_1",'navrg',dcal['Navrg'])

        #conf_201_100 section
        config.add_section("conf_201_100")
        config.set("conf_201_100",'nf',dcal['Nf'])
        config.set("conf_201_100",'ifbhz',dcal['ifbHz'])
        #config.set("conf_201_100",'navrg',dcal['Navrg'])

        #conf_401_100 section
        config.add_section("conf_401_100")
        config.set("conf_401_100",'nf',dcal['Nf'])
        config.set("conf_401_100",'ifbhz',dcal['ifbHz'])
        #config.set("conf_401_100",'navrg',dcal['Navrg'])

        #conf_801_100 section
        config.add_section("conf_801_100")
        config.set("conf_801_100",'nf',dcal['Nf'])
        config.set("conf_801_100",'ifbhz',dcal['ifbHz'])
        #config.set("conf_801_100",'navrg',dcal['Navrg'])

        #conf_1601_100 section
        config.add_section("conf_1601_100")
        config.set("conf_1601_100",'nf',dcal['Nf'])
        config.set("conf_1601_100",'ifbhz',dcal['ifbHz'])
        #config.set("conf_1601_100",'navrg',dcal['Navrg'])

        #conf_201_300 section
        config.add_section("conf_201_300")
        config.set("conf_201_300",'nf',dcal['Nf'])
        config.set("conf_201_300",'ifbhz',dcal['ifbHz'])
        #config.set("conf_201_300",'navrg',dcal['Navrg'])

        #conf_401_300 section
        config.add_section("conf_401_300")
        config.set("conf_401_300",'nf',dcal['Nf'])
        config.set("conf_401_300",'ifbhz',dcal['ifbHz'])
        #config.set("conf_401_300",'navrg',dcal['Navrg'])

        #conf_801_300 section
        config.add_section("conf_801_300")
        config.set("conf_801_300",'nf',dcal['Nf'])
        config.set("conf_801_300",'ifbhz',dcal['ifbHz'])
        #config.set("conf_801_300",'navrg',dcal['Navrg'])

        #conf_1601_300 section
        config.add_section("conf_1601_300")
        config.set("conf_1601_300",'nf',dcal['Nf'])
        config.set("conf_1601_300",'ifbhz',dcal['ifbHz'])
        #config.set("conf_1601_300",'navrg',dcal['Navrg'])

        
        fileini = pyu.getlong(_fileini,pstruc['DIRMES'])
        fd = open(fileini,"w")
        config.write(fd)
        fd.close()

   
    # def showcal(self,ical=1,ncal=0):
    #     """show calibration from vna

    #     Parameters
    #     ----------

    #     ical : int
    #     ncal : int

    #     """
        
    #     plt.plot(np.abs(self.f['cal'+str(ical)][ncal,:]))
    #     plt.show()

if __name__=='__main__':
    doctest.testmod()
    #mesh5(sdata.h5)