import h5py
import  pdb
import numpy as np
from pylayers.antprop.channel import *
from pylayers.util.project import *
import pylayers.util.pyutil as pyu
import ConfigParser

class mesh5(PyLayers):
    """  handles scanner data stored and exploited in hdf5 format
    """
    def __init__(self,_filename):
        """
        """
        self._filename = _filename

    def open(self,mode='r'):
        """
        """
        filename = pyu.getlong(self._filename,pstruc['DIRMES'])
        self.f  = h5py.File(filename,mode)
        lkeys = self.f.keys()
        for k in lkeys:
            exp ="self.d"+k+"={}"
            exec(exp)
            exp ="self.d"+k+"['fminGHz'] =self.f['"+k+"'].attrs['fminGHz']"
            exec(exp)
            exp ="self.d"+k+"['fmaxGHz'] =self.f['"+k+"'].attrs['fmaxGHz']"
            exec(exp)
            exp ="self.d"+k+"['Nf'] =self.f['"+k+"'].attrs['Nf']"
            exec(exp)
            exp ="self.d"+k+"['ifbHz'] =self.f['"+k+"'].attrs['ifbHz']"
            exec(exp)
            exp ="self.d"+k+"['cables'] =self.f['"+k+"'].attrs['cables']"
            exec(exp)
            exp ="self.d"+k+"['Navrg'] =self.f['"+k+"'].attrs['Navrg']"
            exec(exp)
            exp ="self.d"+k+"['comment'] =self.f['"+k+"'].attrs['comment']"
            exec(exp)
            exp ="self.d"+k+"['author'] =self.f['"+k+"'].attrs['author']"
            exec(exp)
            exp ="self.d"+k+"['time'] =self.f['"+k+"'].attrs['time']"
            exec(exp)
            exp ="self.d"+k+"['param'] =self.f['"+k+"'].attrs['param']"
            exec(exp)
            exec('fminGHz=self.d'+k+"['fminGHz']")
            exec('fmaxGHz=self.d'+k+"['fmaxGHz']")
            exec('Nf=self.d'+k+"['Nf']")
            fGHz =  np.linspace(fminGHz,fmaxGHz,Nf)
            exp ="self."+k+"=Tchannel(x=fGHz,y=np.array(self.f['"+k+"']))"
            exec(exp)
        #pdb.set_trace()

    def close(self):
        """ close h5 file
        """
        self.f.close()

    def saveini(self,_fileini='vna_config.ini',ical=1):
        """ save calibration parameters in .ini file

        Parameters
        ----------

        _fileini  : string
            calibration ini file
        ical : int
            calibration number
        """
        exec('dcal=self.dcal'+str(ical))
        config = ConfigParser.ConfigParser()

        config.add_section("stimulus")
        config.set("stimulus",'fminghz',dcal['fminGHz'])
        config.set("stimulus",'fmaxghz',dcal['fmaxGHz'])
        config.set("stimulus",'nf',dcal['Nf'])

        config.add_section("response")
        config.set("response",'param',dcal['param'])
        config.set("response",'average','on')
        config.set("response",'navrg',dcal['Navrg'])
        config.set("response",'ifbhz',dcal['ifbHz'])
        config.set("response",'win',1)
        fileini = pyu.getlong(_fileini,pstruc['DIRMES'])
        fd = open(fileini,"w")
        config.write(fd)
        fd.close()

    def showcal(self,ical=1,ncal=0):
        """show calibration from vna
        """
        plt.plot(np.abs(self.f['cal'+str(ical)][ncal,:]))
        plt.show()


