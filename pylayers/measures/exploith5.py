import h5py
import  pdb
import numpy as np
from pylayers.antprop.channel import *
from pylayers.util.project import *
import pylayers.util.pyutil as pyu
import ConfigParser

class mesh5(PyLayers):
    """  handles scanner data stored and exploited in hdf5 format
    """
    def __init__(self,_filename):
        """
        """
        self._filename = _filename

        if _filename <> '':
            #self.filename = mesdir + rep + _filename
            self.filename = self.open()
            # load file
            self.loadraw()
            if calibration:
                self.calibSISO()
                self.calibMIMO()
                if time:
                    # reshaping for using ift (todo update ift for MDA !!)
                    #Hcal = TChannel(x=self.Hcal.x,y=np.reshape(self.Hcal.y,(Nt*Nr,Nf)))
                    Hcal = Tchannel(self.Hcal.x,np.reshape(self.Hcal.y,(Nt*Nr,Nf)))
                    hcal = Hcal.ift(Nz=Nz,ffts=1)
                    shh = hcal.y.shape
                    self.hcal = TUsignal(hcal.x,np.reshape(hcal.y,(Nr,Nt,shh[-1])))


    def open(self,mode='r'):
        """
        Parameters
        ----------

        mode : string

        """
        filename = pyu.getlong(self._filename,pstruc['DIRMES'])
        self.f  = h5py.File(filename,mode)
        lkeys = self.f.keys()
        for k in lkeys:
            exp ="self.d"+k+"={}"
            exec(exp)
            exp ="self.d"+k+"['fminGHz'] =self.f['"+k+"'].attrs['fminGHz']"
            exec(exp)
            exp ="self.d"+k+"['fmaxGHz'] =self.f['"+k+"'].attrs['fmaxGHz']"
            exec(exp)
            exp ="self.d"+k+"['Nf'] =self.f['"+k+"'].attrs['Nf']"
            exec(exp)
            exp ="self.d"+k+"['ifbHz'] =self.f['"+k+"'].attrs['ifbHz']"
            exec(exp)
            exp ="self.d"+k+"['cables'] =self.f['"+k+"'].attrs['cables']"
            exec(exp)
            exp ="self.d"+k+"['Navrg'] =self.f['"+k+"'].attrs['Navrg']"
            exec(exp)
            exp ="self.d"+k+"['comment'] =self.f['"+k+"'].attrs['comment']"
            exec(exp)
            exp ="self.d"+k+"['author'] =self.f['"+k+"'].attrs['author']"
            exec(exp)
            exp ="self.d"+k+"['time'] =self.f['"+k+"'].attrs['time']"
            exec(exp)
            exp ="self.d"+k+"['param'] =self.f['"+k+"'].attrs['param']"
            exec(exp)
            exec('fminGHz=self.d'+k+"['fminGHz']")
            exec('fmaxGHz=self.d'+k+"['fmaxGHz']")
            exec('Nf=self.d'+k+"['Nf']")
            fGHz =  np.linspace(fminGHz,fmaxGHz,Nf)
            exp ="self."+k+"=Tchannel(x=fGHz,y=np.array(self.f['"+k+"']))"
            exec(exp)

    def close(self):
        """ close h5 file
        """
        self.f.close()

    def saveini(self,
                _fileini='vna_config.ini',
                ical=1):
        """ save calibration parameters in .ini file

        Parameters
        ----------

        _fileini  : string
            calibration ini file
        ical : int
            calibration number
        """
        exec('dcal=self.dcal'+str(ical))
        config = ConfigParser.ConfigParser()

        config.add_section("stimulus")
        config.set("stimulus",'fminghz',dcal['fminGHz'])
        config.set("stimulus",'fmaxghz',dcal['fmaxGHz'])
        config.set("stimulus",'nf',dcal['Nf'])

        config.add_section("response")
        config.set("response",'param',dcal['param'])
        config.set("response",'average','on')
        config.set("response",'navrg',dcal['Navrg'])
        config.set("response",'ifbhz',dcal['ifbHz'])
        config.set("response",'win',1)
        fileini = pyu.getlong(_fileini,pstruc['DIRMES'])
        fd = open(fileini,"w")
        config.write(fd)
        fd.close()

    def loadraw(self,
                ical=1):
        """ load a MIMO Nr x Nt raw data sounder file


        The sounder output file is a 2 columns ASCII csv file
        Module (dB) ;  Angle (Degree)

        """
        Dh5 = mesh5(_fileh5)
        Dh5.open(mode='r')
        Dh5.saveini(ical=ical)
        
        #exp = 'Nf = Dh5.dcal'+str(ical)+"['Nf']"
        #exec(exp)
        # initialization of vna
        
        vna = SCPI()
        vna.load_config()
        Nf = vna.Nf

        lis = Dh5.readlines()
        Dh5.close()

        module   = []
        phasedeg = []

        for l in lis:
            l.replace('\r\n','')
            g = l.split(';')
            module.append(float(g[0]))
            phasedeg.append(float(g[1]))

        m   = np.array(module)
        phi = np.array(phasedeg)*np.pi/180.
        m   = m.reshape(self.Nr*self.Nt,self.Nf)
        phi = phi.reshape(self.Nr*self.Nt,self.Nf)
        y   = 10**(m/20)*np.exp(1j*phi)
        #
        # Nr x Nt x Nf    (8x4x1601)
        #
        y   = y.reshape(self.Nr,self.Nt,self.Nf)

        self.H = Tchannel(x=self.freq,y=y)


    def calibSISO(self,
        _fileh5 = 'sdata.h5',
        _filename="vna_config.ini"):
        """Apply SISO calibration files

        Parameters
        ----------
        
        _fileh5 : string
            name of the h5 file containing calibration data

        """
        
               
        #To create calibration and loadrax in __init__
        
        Cs_h5 = self.calibSISO(_fileh5,calibration=False)
        
        try:
            tc = np.vstack((tc,Cs_h5.H.y[0,0,:]))
        except:
            tc = Cs_h5.H.y[0,0,:]

        tc = tc.reshape(0,0,self.Nf)
        # C.freq , Nf
        self.C = Tchannel(x=C.freq,y=tc)
        self.Hcal = self.H/self.C
        del self.H
        del self.C


    def calibMIMO(self,_fileh5='sdata.h5'):
        """Apply MIMO calibration files

        Parameters
        ----------
        

        """

        for iR in range(self.Nr):
            for iT in range(self.Nt):
                _filename = 'Calib'+str(iT+1)+'x'+str(iR+1)+'.txt'
                C = MIMO(_filename=_filename,rep='/calibration/',calibration=False,Nt=self.Nt)
                try:
                    #tc = np.vstack((tc,C.H.y[iR*4+iT,:]))
                    tc = np.vstack((tc,C.H.y[iR,iT,:]))
                except:
                    #tc = C.H.y[iR*4+iT,:]
                    tc = C.H.y[iR,iT,:]

        #MIMO
        # Nr x Nt x Nf
        tc = tc.reshape(self.Nr,self.Nt,self.Nf)
        # C.freq , Nf
        self.C = Tchannel(x=C.freq,y=tc)
        self.Hcal = self.H/self.C
        del self.H
        del self.C

    def showcal(self,ical=1,ncal=0):
        """show calibration from vna

        Parameters
        ----------

        ical : int
        ncal : int

        """
        
        plt.plot(np.abs(self.f['cal'+str(ical)][ncal,:]))
        plt.show()