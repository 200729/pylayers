
Handling Antennas
=================


    Antennas are handled in the ``pylayers.antenna`` module.
    ``PyLayers`` provides a compact representation of complex antennas
    using both vector and scalar spherical harmonics representation of
    the complex antenna radiation pattern.

.. code-block:: python

    from pylayers.antprop.antenna import *
    from pylayers.antprop.antvsh import *
The first step consists in reading the raw data from an antenna ``.mat``
file. In the example below the antenna has been measured in a
`SATIMO <http://satimo.com/>`_ near field chamber. Antennas are by
default read in a directory specified relativeley to the curent project
pointed by the ``$BASENAME`` environment variable.

.. code-block:: python

    A = Antenna('S1R1.mat','ant/UWBAN/Matfile')
The Antenna class has a **repr** method which provides information about
the curent object.

.. code-block:: python

    A



.. parsed-literal::

    file name : S1R1.mat
    antenna name : Th1
    date : 04/12/12
    time : 15:55
    Notes : Mohamed at the log
    
    Serie : 1
    Run : 1
    Nb theta (lat) : 91
    Nb phi (lon) :180




.. code-block:: python

    #%pfile A.show3
If `geomview <http://www.geomview.org/>`_ is installed a vizalization of
the antenna pattern is obtained in using a ``show3`` method

.. code-block:: python

    #A.show3(k=0,typ='Gain')
.. code-block:: python

    #A.show3(k=60,typ='Gain')
Unwraping the phase
-------------------


.. code-block:: python

    freq = A.fa.reshape(104,1,1)
    ed = A.getdelay(freq)
    I = A.Ftheta[:,:,:]*np.exp(2*1j*np.pi*freq*ed)
.. code-block:: python

    np.shape(A.Fphi)
    im= plt.imshow(np.angle(I[:,45,:]))
    cb = plt.colorbar()
    cb.set_label('phase rad')
    plt.xlabel('theta')




.. parsed-literal::

    <matplotlib.text.Text at 0x3e09a90>




.. image:: Antennas_files/Antennas_13_1.png


.. code-block:: python

    plt.plot(freq[:,0,0]*1e9,np.unwrap(np.angle(I[:,45,85])))
    plt.xlabel('frequency (GHz)')



.. parsed-literal::

    <matplotlib.text.Text at 0x3813510>




.. image:: Antennas_files/Antennas_14_1.png


The following figure represents all the radiation patterns in the
azimuth plane for each of the 104 measured frequencies

.. code-block:: python

    print 'Ntheta',A.Nt
    print 'Nphi',A.Np
    print 'Nf',A.Nf

.. parsed-literal::

    Ntheta 91
    Nphi 180
    Nf 104


.. code-block:: python

    A.info()

.. parsed-literal::

    S1R1.mat
    type :  mat
    S1R1
    Th1
    04/12/12
    15:55
    Mohamed at the log
    
    1
    1
    Nb theta (lat) : 91
    Nb phi (lon) : 180
    No vsh coefficient calculated yet


Evaluation of Vector Spherical Harmonics Coefficients
-----------------------------------------------------

At that stage the Vector Spherical Harmonics coefficients are computed.

The ``vsh`` function is implemented in the module ``antvsh.py`` and is
relying on the 'spherepack
http://www2.cisl.ucar.edu/resources/legacy/spherepack'\_ package.

.. code-block:: python

    A = vsh(A)
The information about the antenna indicates now the presence of
spherical coefficients, in format vsh1.

N1 = 90 and M1 = 89.

There is the same number of coefficients for :math:`$B_r$`,
:math:`$B_i$`, :math:`$C_r$`, :math:`$C_i$` independently to their
relative importance.

.. code-block:: python

    A.C



.. parsed-literal::

    Br
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    
    Bi
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    
    Cr
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    
    Ci
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010




.. code-block:: python

    A.C.s1tos2(30)
.. code-block:: python

    A.C



.. parsed-literal::

    Br
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    NCoeff s2  : 495
    
    Bi
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    NCoeff s2  : 495
    
    Cr
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    NCoeff s2  : 495
    
    Ci
    -------------
    N1  : 90
    M1  : 89
    Ncoeff s1 8010
    NCoeff s2  : 495




.. code-block:: python

    plt.figure(figsize=(10,10))
    A.C.show(typ='s2',k=300)


.. image:: Antennas_files/Antennas_24_0.png


Transformation in shape 3 - energy thresholding

.. code-block:: python

    A.C.s2tos3(1e-5)
.. code-block:: python

    plt.figure(figsize=(10,10))
    A.C.show('s3')


.. image:: Antennas_files/Antennas_27_0.png


.. code-block:: python

    print len(A.theta)
    print len(A.phi)

.. parsed-literal::

    91
    180


.. code-block:: python

    Fth2,Fph2 = A.Fsynth3(A.theta,A.phi,pattern=True) 
.. code-block:: python

    compdiag(0,A,A.theta,A.phi,Fth2,Fph2,'modulus')


.. image:: Antennas_files/Antennas_30_0.png


.. code-block:: python

    A



.. parsed-literal::

    file name : S1R1.mat
    antenna name : Th1
    date : 04/12/12
    time : 15:55
    Notes : Mohamed at the log
    
    Serie : 1
    Run : 1
    Nb theta (lat) : 91
    Nb phi (lon) :180




.. code-block:: python

    from IPython.core.display import HTML
    
    def css_styling():
        styles = open("../styles/custom.css", "r").read()
        return HTML(styles)
    css_styling()



.. raw:: html

    <style>
        @font-face {
            font-family: "Computer Modern";
            src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');
        }
        div.cell{
            width:800px;
            margin-left:16% !important;
            margin-right:auto;
        }
        h1 {
            font-family: Helvetica, serif;
        }
        h4{
            margin-top:12px;
            margin-bottom: 3px;
           }
        div.text_cell_render{
            font-family: Computer Modern, "Helvetica Neue", Arial, Helvetica, Geneva, sans-serif;
            line-height: 145%;
            font-size: 130%;
            width:800px;
            margin-left:auto;
            margin-right:auto;
        }
        .CodeMirror{
                font-family: "Source Code Pro", source-code-pro,Consolas, monospace;
        }
        .prompt{
            display: None;
        }
        .text_cell_render h5 {
            font-weight: 300;
            font-size: 22pt;
            color: #4057A1;
            font-style: italic;
            margin-bottom: .5em;
            margin-top: 0.5em;
            display: block;
        }
        
        .warning{
            color: rgb( 240, 20, 20 )
            }  
    </style>
    <script>
        MathJax.Hub.Config({
                            TeX: {
                               extensions: ["AMSmath.js"]
                               },
                    tex2jax: {
                        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                        displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
                    },
                    displayAlign: 'center', // Change this to 'center' to center equations.
                    "HTML-CSS": {
                        styles: {'.MathJax_Display': {"margin": 4}}
                    }
            });
    </script>


