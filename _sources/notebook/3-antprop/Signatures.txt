
Ray Signatures
==============

.. code-block:: python

    import time
    from pylayers.gis.layout import *
    from pylayers.antprop.signature import *
    from pylayers.antprop.rays import *


.. parsed-literal::

    <matplotlib.figure.Figure at 0x432c850>


.. code-block:: python

    L = Layout('defstr.ini')
    try:
        L.dumpr()
    except:
        L.build()
        L.dumpw()
Showing the graph of rooms with 2 rooms separated by a DOOR segment

.. code-block:: python

    L.showG('v')
    a=plt.axis('off')


.. image:: Signatures_files/Signatures_4_0.png


The graph of interactions is shown below.

.. code-block:: python

    L.showG('i',figsize=(20,20))
    a=plt.axis('off')


.. image:: Signatures_files/Signatures_6_0.png


All the interactions of a given cycle are stored as meta information in
nodes of ``Gt``

.. code-block:: python

    L.Gt.node[0]['inter']



.. parsed-literal::

    ['(3, 0)',
     '(4, 0)',
     '(7, 0)',
     '(7, 0, 1)',
     '(7, 1, 0)',
     '(9, 0)',
     '(9, 0, 1)',
     '(9, 1, 0)',
     '(8, 0)',
     '(8, 0, 1)',
     '(8, 1, 0)',
     '(2, 0)']



The signature is calculated with as parameters the Layout object and two
cycle numbers. In example below it is 0 and 1.

.. code-block:: python

    Si = Signatures(L,0,1)
The cold start determination of the signature is done with a ``run``
function. The code is not in its final shape here and there is room for
significant acceleration in incorporating propagation based heuristics.
The mitigation of graph exploration depth is done in setting a
``cutoff`` value which limits the exploration in the interaction graph.

.. code-block:: python

    Si.run4(cutoff=5)
The representation method of a signature gives varous informations about
the different signatures. Signatures are grouped by number of
interactions.

.. code-block:: python

    L.Gt.pos



.. parsed-literal::

    {0: (7.5, 0.0), 1: (2.5, -0.0)}



.. code-block:: python

    ptx = np.array(L.Gt.pos[0])+np.random.rand(2)
    prx = np.array(L.Gt.pos[1])+np.random.rand(2)
    print ptx
    print prx

.. parsed-literal::

    [ 7.90716852  0.74635487]
    [ 2.53627782  0.94378265]


.. code-block:: python

    from IPython.core.display import HTML
    
    def css_styling():
        styles = open("../styles/custom.css", "r").read()
        return HTML(styles)
    css_styling()



.. raw:: html

    <style>
        @font-face {
            font-family: "Computer Modern";
            src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');
        }
        div.cell{
            width:800px;
            margin-left:16% !important;
            margin-right:auto;
        }
        h1 {
            font-family: Helvetica, serif;
        }
        h4{
            margin-top:12px;
            margin-bottom: 3px;
           }
        div.text_cell_render{
            font-family: Computer Modern, "Helvetica Neue", Arial, Helvetica, Geneva, sans-serif;
            line-height: 145%;
            font-size: 130%;
            width:800px;
            margin-left:auto;
            margin-right:auto;
        }
        .CodeMirror{
                font-family: "Source Code Pro", source-code-pro,Consolas, monospace;
        }
        .prompt{
            display: None;
        }
        .text_cell_render h5 {
            font-weight: 300;
            font-size: 22pt;
            color: #4057A1;
            font-style: italic;
            margin-bottom: .5em;
            margin-top: 0.5em;
            display: block;
        }
        
        .warning{
            color: rgb( 240, 20, 20 )
            }  
    </style>
    <script>
        MathJax.Hub.Config({
                            TeX: {
                               extensions: ["AMSmath.js"]
                               },
                    tex2jax: {
                        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                        displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
                    },
                    displayAlign: 'center', // Change this to 'center' to center equations.
                    "HTML-CSS": {
                        styles: {'.MathJax_Display': {"margin": 4}}
                    }
            });
    </script>


