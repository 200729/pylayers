
Coverage with a Multi Wall model
================================


    Sometimes it might be useful to get a fast estimate about losses in
    a given indoor environment. Ray tracing is generally time consuming
    and depending on the purpose of the study it could be relevant to
    proceed with a simpler approach while staying site-specific.
    ``PyLayers`` provides such a tool which heavily relies on the core
    module ``slab.py``

First let's import the ``coverage`` module

.. code-block:: python

    from pylayers.antprop.coverage import *
    import time


.. parsed-literal::

    <matplotlib.figure.Figure at 0x523fb50>


Instantiate a coverage object. By defaut, ``TA-Office.str`` layout
strucure is loaded.

This information can be modified in the **coverage.ini** file in the
project directory.

Below is an example of how the content of the file looks like

.. code-block:: python

    !cat $BASENAME/ini/coverage.ini

.. parsed-literal::

    [pl_model]
    sigrss = 3.0
    fGHz = 3.0
    rssnp = 2.64
    d0 = 1.0
    
    
    [grid]
    nx = 80
    ny = 40
    boundary = [20,0,30,20]
    full = True
    
    [layout]
    filename = TA-Office.ini
    ;filename = W2PTIN.ini
    ;filename = Lstruc.str
    
    [tx]
    fGHz = 3.0
    x = 25
    y = 5 
    ;transmitted power (dBm)
    ptdbm = 0
    ; frame length in bytes
    framelengthbytes = 50000 
    
    [rx]
    sensitivity  = -80
    bandwidthmhz = 3
    temperaturek = 300
    noisefactordb = 13
    
    [show]
    show = True


.. code-block:: python

    # Create a Coverage object from coverag.ini file
    C = Coverage()

.. parsed-literal::

    G s  not saved


The coverage object has a ``__repr__`` which summarizes the different
parameters of the current coverage object

.. code-block:: python

    C



.. parsed-literal::

    Layout file : TA-Office.ini
    
    -----Tx------
    tx (coord) : [25  5]
    fghz : 3.0
    Pt (dBm) : 0
    
    -----Rx------
    rxsens (dBm) : -80
    bandwith (Mhz) : 3
    temperature (K) : 300
    noisefactor (dB) : 13
    
    --- Grid ----
    nx : 80
    ny : 40
    full grid : True
    boundary (xmin,ymin,xmax,ymax) : [20, 0, 30, 20]
    
    ---- PL Model------
    plm : {'fghz': '3.0', 'rssnp': '2.64', 'd0': '1.0', 'sigrss': '3.0'}




.. code-block:: python

    # evaluate coverage 
    C.cover()
Calculating Received Power Coverage
===================================


.. code-block:: python

    C.L.display['nodes']=False
    C.L.display['ednodes']=False
    C.L.showGs()



.. parsed-literal::

    (<matplotlib.figure.Figure at 0x7fd6a00a3dd0>,
     <matplotlib.axes.AxesSubplot at 0x5f9e810>)




.. image:: Coverage_files/Coverage_11_1.png


Then, the coverage calculation is launched by calling the ``cover()``
method

The shadowing map coverage results can be displayed by invoquing various
functions.

-  showLoss : display the path loss
-  showPower : display the received powercover


The following examples represent the estimated received power for 3
different frequencies

.. code-block:: python

    C.fGHz=0.400
    tic = time.time()
    C.cover()
    C.showPower(figsize=(10,10))
    toc =time.time()
    print 'Elapsed time : {0:.2f} seconds'.format(toc-tic)

.. parsed-literal::

    /usr/local/lib/python2.7/dist-packages/numpy/ma/core.py:3791: UserWarning: Warning: converting a masked element to nan.
      warnings.warn("Warning: converting a masked element to nan.")



.. image:: Coverage_files/Coverage_15_1.png


.. parsed-literal::

    Elapsed time : 1.14 seconds


.. code-block:: python

    C.fGHz=2.4
    tic = time.time()
    C.cover()
    C.showPower(figsize=(10,10))
    toc =time.time()
    print 'Elapsed time : {0:.2f} seconds'.format(toc-tic)


.. image:: Coverage_files/Coverage_16_0.png


.. parsed-literal::

    Elapsed time : 1.14 seconds


.. code-block:: python

    C.fGHz=2.4
    tic = time.time()
    C.cover()
    C.showPower(figsize=(10,10))
    toc =time.time()
    print 'Elapsed time : {0:.2f} seconds'.format(toc-tic)


.. image:: Coverage_files/Coverage_17_0.png


.. parsed-literal::

    Elapsed time : 1.17 seconds


The transmitter coordinates are :

.. code-block:: python

    C.tx



.. parsed-literal::

    array([25,  5])



This can be modified on the flight, and the coverage is updated
accordingly

.. code-block:: python

    C.fGHz=100
    C.tx = np.array((21,2))
    
    %timeit
    C.cover()
    C.showPower(polar='o',figsize=(10,10))
    C.showPower(polar='p',figsize=(10,10))


.. image:: Coverage_files/Coverage_21_0.png



.. image:: Coverage_files/Coverage_21_1.png




.. parsed-literal::

    (<matplotlib.figure.Figure at 0x7fd6a141fd90>,
     <matplotlib.axes.AxesSubplot at 0x7fd6a1420210>)



.. code-block:: python

    from IPython.core.display import HTML
    
    def css_styling():
        styles = open("../styles/custom.css", "r").read()
        return HTML(styles)
    css_styling()



.. raw:: html

    <style>
        @font-face {
            font-family: "Computer Modern";
            src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');
        }
        div.cell{
            width:800px;
            margin-left:16% !important;
            margin-right:auto;
        }
        h1 {
            font-family: Helvetica, serif;
        }
        h4{
            margin-top:12px;
            margin-bottom: 3px;
           }
        div.text_cell_render{
            font-family: Computer Modern, "Helvetica Neue", Arial, Helvetica, Geneva, sans-serif;
            line-height: 145%;
            font-size: 130%;
            width:800px;
            margin-left:auto;
            margin-right:auto;
        }
        .CodeMirror{
                font-family: "Source Code Pro", source-code-pro,Consolas, monospace;
        }
        .prompt{
            display: None;
        }
        .text_cell_render h5 {
            font-weight: 300;
            font-size: 22pt;
            color: #4057A1;
            font-style: italic;
            margin-bottom: .5em;
            margin-top: 0.5em;
            display: block;
        }
        
        .warning{
            color: rgb( 240, 20, 20 )
            }  
    </style>
    <script>
        MathJax.Hub.Config({
                            TeX: {
                               extensions: ["AMSmath.js"]
                               },
                    tex2jax: {
                        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
                        displayMath: [ ['$$','$$'], ["\\[","\\]"] ]
                    },
                    displayAlign: 'center', // Change this to 'center' to center equations.
                    "HTML-CSS": {
                        styles: {'.MathJax_Display': {"margin": 4}}
                    }
            });
    </script>



The excess delay due to crossing the wall can also be evaluted.
