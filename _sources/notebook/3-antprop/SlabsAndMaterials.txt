
Slabs and Materials
===================




A slab is a set ol several layers of materials with specified thickness.
Slabs are used to describe properties of the different constitutive
elements of a building such as wall, windows ,...

In practice when describing a specific building, it is necessary to
specify a set of different slabs with different characteristics.

The structure which gathers this set is ``SlabDB``. If no file argument
is given, this structure is initialized with the default file:
`slabDB.ini <https://github.com/pylayers/pylayers/blob/master/data/ini/slabDB.ini>`_

This section demonstates some features of the ``pylayers.antprop.slab``
module.

.. code-block:: python

    from pylayers.antprop.slab import *
    fig = plt.figure(figsize=(10,10))


.. parsed-literal::

    <matplotlib.figure.Figure at 0x33a9510>


The Class ``SlabDB`` contains a dictionnary of all available Slab. This
information is read in the file ``slabDB.ini`` of the current project
pointed by environment variable ``$BASENAME``

A ``__repr__`` method provides a visual indication of the thichness and
materials of a ``Slab``

.. code-block:: python

    S = SlabDB()
.. code-block:: python

    S.keys()



.. parsed-literal::

    ['WINDOW_GLASS',
     'PLASTERBOARD_7CM',
     'WALL',
     'AIR',
     'WINDOW',
     'METALIC',
     'PLASTERBOARD_14CM',
     'DOOR',
     'FLOOR',
     'METAL',
     'PARTITION',
     'CONCRETE_20CM3D',
     'PLASTERBOARD_10CM',
     'CEIL',
     'CONCRETE_6CM3D',
     'CONCRETE_15CM3D',
     '3D_WINDOW_GLASS',
     'WALLS',
     'WOOD',
     'CONCRETE_7CM3D',
     'PILLAR',
     'ABSORBENT']



Defining a new Slab and a new Material
--------------------------------------


.. code-block:: python

    S.mat.add(name='wall2',typ='reim',cval=2.6-0.026*1j,fGHz=4)
.. code-block:: python

    S.add('slab2',['wall2'],[0.15])
.. code-block:: python

    S.mat['wall2']



.. parsed-literal::

    {'epr': array(2.6),
     'epr2': array(-0.026),
     'epsr': (2.6-0.026j),
     'fGHz': 4,
     'index': 11,
     'mur': 1,
     'n': (1.6124717046742498-0.0080621569744854828j),
     'name': 'wall2',
     'roughness': 0,
     'sigma': 0.0057777777777777775}



.. code-block:: python

    S['slab2']['lmatname']



.. parsed-literal::

    ['wall2']



.. code-block:: python

    fGHz= np.arange(3,5,0.01)
    theta = np.arange(0,np.pi/2,0.01)
    S['slab2'].ev(fGHz,theta)
.. code-block:: python

    S['slab2'].ev



.. parsed-literal::

    <bound method Slab.ev of fGHz :  [ 3.]:[ 4.99]:200
    theta : [ 0.]:[ 1.57]:158
    | wall2 | 
    |---------------|
    >



.. code-block:: python

    S['slab2'].pcolor()


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_15_0.png


.. code-block:: python

    A=S['slab2']
.. code-block:: python

    R=A.R
Slab Information
----------------

Each slab contains informations about its constitutive materials
electromagnetic properties.

Below an example for a simple slab, constituted with a single material.
The slab 'WOOD' is a layer of 4cm 'WOOD' material.

.. code-block:: python

    S['WOOD']['lmatname']



.. parsed-literal::

    ['WOOD']



.. code-block:: python

    S['WOOD']['lthick']



.. parsed-literal::

    [0.04]



.. code-block:: python

    S['WOOD']['color']



.. parsed-literal::

    'maroon'



.. code-block:: python

    S['WOOD']['linewidth']



.. parsed-literal::

    2



Multi layers Slab, using different stacks of materials can be easily
defined using the two lists **lmatname** and **lthick**.

    Notice the adopted convention naming lists starting with letter 'l'
    and dictionnaries starting with letter 'd'

.. code-block:: python

    S['3D_WINDOW_GLASS']['lmatname']



.. parsed-literal::

    ['GLASS', 'AIR', 'GLASS']



.. code-block:: python

    S['3D_WINDOW_GLASS']['lthick']



.. parsed-literal::

    [0.005, 0.005, 0.005]



For each constitutive material of a slab, their electromagnetic
properties can be obtained as:

.. code-block:: python

    S['3D_WINDOW_GLASS']['lmat']



.. parsed-literal::

    [{'epr': (3.79999995232+0j),
      'index': 4,
      'mur': (1+0j),
      'name': 'GLASS',
      'roughness': 0.0,
      'sigma': 0.0},
     {'epr': (1+0j),
      'index': 1,
      'mur': (1+0j),
      'name': 'AIR',
      'roughness': 0.0,
      'sigma': 0.0},
     {'epr': (3.79999995232+0j),
      'index': 4,
      'mur': (1+0j),
      'name': 'GLASS',
      'roughness': 0.0,
      'sigma': 0.0}]



Slab evaluation
---------------


Each Slab can be evaluated to obtain the Transmission and Reflexion
coefficients for

-  a given frequency range
-  a given incidence angle range (:math:`$0\le\theta<\frac{\pi}{2}$`)


.. code-block:: python

    fGHz = np.arange(3,5,0.01)
    theta = np.arange(0,pi/2,0.01)
    
    S['WOOD'].ev(fGHz,theta,compensate=True)
    sR = np.shape(S['WOOD'].R) 
    print '\nHere, slab is evaluted for',sR[0],'frequency(ies)', 'and',sR[1], 'angle(s)\n'

.. parsed-literal::

    
    Here, slab is evaluted for 200 frequency(ies) and 158 angle(s)
    


Transmission and Reflexion coefficients
---------------------------------------


Reflexion and transmission coefficient are computed for the given
frequency range and theta range

.. code-block:: python

    ifreq=1
    ithet=10
    
    print '\nReflection coefficient @',fGHz[ifreq],'GHz and theta=',theta[ithet],':\n\n R=',S['WOOD'].R[0,0]
    print '\nTransmission coefficient @',fGHz[ifreq],'GHz and theta=',theta[ithet],':\n\n T=',S['WOOD'].T[0,0],'\n'


.. parsed-literal::

    
    Reflection coefficient @ 3.01 GHz and theta= 0.1 :
    
     R= [[-0.39396205-0.17289585j  0.00000000+0.j        ]
     [ 0.00000000+0.j          0.39396205+0.17289585j]]
    
    Transmission coefficient @ 3.01 GHz and theta= 0.1 :
    
     T= [[-0.17594898-0.86927604j -0.00000000+0.j        ]
     [-0.00000000+0.j         -0.17594898-0.86927604j]] 
    


Ploting Coefficients
~~~~~~~~~~~~~~~~~~~~


::

    plotwrt (plot with respect to)

    Parameters
    ----------

     kv  : int
        variable index
     polar: string 
            'po', # po | p | o   (parallel+ortho | parallel | ortogonal)
     coeff: string 
            'RT', # RT | R | T   (Reflexion & Transmission ) | Reflexion | Transmission 
     var:  string 
            'a',    # a | f       angle | frequency 
     types : string 
            'm' | 'r' | 'd' | 'l20'
            mod   rad    deg   dB


.. code-block:: python

    fig,ax = S['WOOD'].plotwrt(var='f',coeff='R',polar='p')


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_36_0.png


with respect to angle

.. code-block:: python

    fig = plt.figure(figsize=(20,20))
    fGHz= np.array([2.4])
    S['WOOD'].ev(fGHz,theta)
    fig,ax = S['WOOD'].plotwrt(var='a',coeff='R',fig=fig)
    plt.tight_layout()


.. parsed-literal::

    <matplotlib.figure.Figure at 0x7fd60eb464d0>



.. image:: SlabsAndMaterials_files/SlabsAndMaterials_38_1.png


wrt to angle and frequency

.. code-block:: python

    plt.figure(figsize=(10,10))
    fGHz= np.arange(0.7,5.2,0.1)
    S['WOOD'].ev(fGHz,theta)
    S['WOOD'].pcolor()


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_40_0.png


.. code-block:: python

    theta = np.arange(0,np.pi/2,0.01)
    fGHz = np.arange(0.1,10,0.2)
    sl = SlabDB('matDB.ini','slabDB.ini')
    mat   = sl.mat
    lmat  = [mat['AIR'],mat['WOOD']]
    II    = MatInterface(lmat,0,fGHz,theta)
    II.RT()
    fig,ax = II.plotwrt(var='a',kv=10,types=['m'])
    tight_layout()
    air = mat['AIR']
    brick  = mat['BRICK']
    II  = MatInterface([air,brick],0,fGHz,theta)
    II.RT()
    fig,ax = II.plotwrt(var='f',color='k',types=['m'])
    tight_layout()


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_41_0.png



.. image:: SlabsAndMaterials_files/SlabsAndMaterials_41_1.png


.. code-block:: python

    ## Adding new materials
.. code-block:: python

    sl.mat.add(name='TESS-p50',cval=3+0j,sigma=0.06,typ='epsr')
    
    sl.add(name='TESS-p50-5cm',lmatname=['TESS-p50'],lthick=[0.05])
    sl.add(name='TESS-p50-10cm',lmatname=['TESS-p50'],lthick=[0.10])
    sl.add(name='TESS-p50-15cm',lmatname=['TESS-p50'],lthick=[0.15])
    fGHz=4
    theta = np.arange(0,np.pi/2,0.01)
    #figure(figsize=(8,8))
    # These Tessereau page 50 
    
    sl['TESS-p50-5cm'].ev(fGHz,theta,compensate=True)
    sl['TESS-p50-10cm'].ev(fGHz,theta,compensate=True)
    sl['TESS-p50-15cm'].ev(fGHz,theta,compensate=True)
    
    # by default var='a' and kv = 0 
    
    fig,ax = sl['TESS-p50-5cm'].plotwrt(color='k',labels=[''])
    fig,ax = sl['TESS-p50-10cm'].plotwrt(color='k',labels=[''],linestyle='dashed',fig=fig,ax=ax)
    fig,ax = sl['TESS-p50-15cm'].plotwrt(color='k',labels=[''],linestyle='dashdot',fig=fig,ax=ax)
    plt.tight_layout()

.. parsed-literal::

    /usr/local/lib/python2.7/dist-packages/matplotlib-1.2.1-py2.7-linux-x86_64.egg/matplotlib/axes.py:4601: UserWarning: No labeled objects found. Use label='...' kwarg on individual plots.
      warnings.warn("No labeled objects found. "



.. image:: SlabsAndMaterials_files/SlabsAndMaterials_43_1.png


Evaluation without phase compensation
-------------------------------------


.. code-block:: python

    fGHz = np.arange(2,16,0.1)
    theta = 0 
    
    sl['TESS-p50-5cm'].ev(fGHz,theta,compensate=False)
    sl['TESS-p50-10cm'].ev(fGHz,theta,compensate=False)
    sl['TESS-p50-15cm'].ev(fGHz,theta,compensate=False)
        
    fig,ax = sl['TESS-p50-5cm'].plotwrt('f',coeff='T',types=['ru'],labels=[''],color='k')
    print ax
    #fig,ax = sl['TESS-p50-10cm'].plotwrt('f',coeff='T',types=['ru'],labels=[''],color='k',linestyle='dashed',fig=fig,ax=ax)
    #fig,ax = sl['TESS-p50-15cm'].plotwrt('f',coeff='T',types=['ru'],labels=[''],color='k',linestyle='dashdot')
    plt.tight_layout()

.. parsed-literal::

    [[<matplotlib.axes.AxesSubplot object at 0x7fd618691350>]
     [<matplotlib.axes.AxesSubplot object at 0x7fd61866c710>]]



.. image:: SlabsAndMaterials_files/SlabsAndMaterials_45_1.png


.. code-block:: python

    
    
    sl['TESS-p50-5cm'].ev(fGHz,theta,compensate=True)
    sl['TESS-p50-10cm'].ev(fGHz,theta,compensate=True)
    sl['TESS-p50-15cm'].ev(fGHz,theta,compensate=True)
    
    fig,ax = sl['TESS-p50-5cm'].plotwrt('f',coeff='T',types=['ru'],labels=['5cm compensated',''],color='r',fig=fig,ax=ax)
    fig,ax = sl['TESS-p50-10cm'].plotwrt('f',coeff='T',types=['ru'],labels=['10cm compensated',''],color='r',linestyle='dashed',fig=fig,ax=ax)
    fig,ax = sl['TESS-p50-15cm'].plotwrt('f',coeff='T',types=['ru'],labels=['15cm not compensated',''],color='r',linestyle='dashdot',fig=fig,ax=ax) 
    
    fig,ax = sl['TESS-p50-5cm'].plotwrt('f',coeff='T',labels=[''],color='k')
    fig,ax = sl['TESS-p50-10cm'].plotwrt('f',coeff='T',labels=[''],color='k',linestyle='dashed',fig=fig,ax=ax)
    fig,ax = sl['TESS-p50-15cm'].plotwrt('f',coeff='T',labels=[''],color='k',linestyle='dashdot',fig=fig,ax=ax)


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_46_0.png


Double Glass example from litterature [1] in sub TeraHertz D-band @
120GHz
--------------------------------------------------------------------------


.. code-block:: python

    sl.mat.add('ConcreteJc',cval=3.5,alpha_cmm1=1.9,fGHz=120,typ='THz')
    sl.mat.add('GlassJc',cval=2.55,alpha_cmm1=2.4,fGHz=120,typ='THz')
    sl.add('ConcreteJc',['ConcreteJc'],[0.049])
    
    theta = np.linspace(20,60,100)*np.pi/180
    sl['ConcreteJc'].ev(120,theta)
    fig,ax = sl['ConcreteJc'].plotwrt('a')
    



.. image:: SlabsAndMaterials_files/SlabsAndMaterials_48_0.png


.. code-block:: python

    fGHz = np.linspace(110,135,50)
    sl.add('DoubleGlass',['GlassJc','AIR','GlassJc'],[0.0029,0.0102,0.0029])
    sl['DoubleGlass'].ev(fGHz,theta)
    sl['DoubleGlass'].pcolor(dB=True)


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_49_0.png


.. code-block:: python

    plt.figure(figsize=(10,10))
    sl['DoubleGlass'].ev(120,theta)
    fig,ax = sl['DoubleGlass'].plotwrt('a')
    tight_layout()


.. parsed-literal::

    <matplotlib.figure.Figure at 0x7fd60eb26c10>



.. image:: SlabsAndMaterials_files/SlabsAndMaterials_50_1.png


.. code-block:: python

    freq = np.linspace(110,135,50)
    sl['DoubleGlass'].ev(freq,theta)
    fig,ax = sl['DoubleGlass'].plotwrt('f',figsize=(10,10))  # @20°
    tight_layout()


.. image:: SlabsAndMaterials_files/SlabsAndMaterials_51_0.png


References
----------


[1]. `Jacob, M. ; Kurner, T. ; Geise, R. ; Piesiewicz, R. "Reflection
ant Transmission Properties of Building Materials in D-Band for Modeling
Future mm-Wave Communication Systems" Antennas and Propagation (EuCAP),
2010 Proceedings of the Fourth European Conference
on <http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=5505315&queryText=Reflection+ant+Transmission+Properties+of+Building+Materials+in+D-Band+for+Modeling+Future+mm-Wave+Communication+Systems.QT.+Antennas+and+Propagation>`_

[2]. `R.Piesiewicz 'Terahertz characterization of building materials'
Electronics .Letters Jan 2005 Vol 41
N°18 <https://www.google.fr/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CCwQFjAA&url=http://www-ece.rice.edu/~daniel/papers/normanElecLett.pdf&ei=Tr_eUe6EG-OM0AWA0IAw&usg=AFQjCNHzt9H3RkLAtws51E9EpEgyqh-6LA&sig2=QLZlhoTJtiuHAW5Zzg_xOw&bvm=bv.48705608,d.d2k>`_
