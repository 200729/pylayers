
What PyLayers is about ?
------------------------


The scientific face of the Python world is vibrant nowadays and the
collection of all recentlty developped tools is facilitating studies of
advanced problems.
``Ipython,numpy,numba,scipy,matplotlib,shapely,networkx,pandas,scikit-image,scikit-learn,mayavi,vispy,simpy,sympy,..``
Each of those projects is terrific, the collection of them is changing
the world ( ...not only of data science ).

PyLayers is an ongoing endeavour to build a versatile, intuitive and
efficient open source platform for cross layer studies deeply rooted in
the physics of wireless propagation and which will be soon connected to
the stratospherically powerful and inspiring
`scikit-learn <http://scikit-learn.org>`_ advanced machine learning
library.

In the short term, the major targeted appplications are in the field of
wireless indoor radio localization and navigation. However it is
anticipated that provided a sufficient amount of contributors (students,
experts,...) hopefully may join, the evolution of the PyLayers platform
could also help for tackling other related problems as designing energy
efficient wireless 5G networks, smart grids and cities in a modern,
cooperative, parcimonious and resiliant way.

PyLayers owes immensly to two former FP7 European Projects brillantly
led by Ronald Raulefs from DLR (WHERE1 and
`WHERE2 <http://www.kn-s.dlr.de/where2/>`_ ) and to the amazing
expertise and frienship which was there concentrated on the topic of
Indoor localization between 2008 and 2013. Most of the examples provided
and currently studied comes out from those 2 projects.

PyLayers is currently developped in the frame of the CORMORAN French ANR
project.

An other obvious purpose of PyLayers is transmission and engineering
education. So, if you are a curious student who can see the fun of
surfing radio waves with python, please try to catch it, have a look
inside !

PyLayers needs you.

Bernard Uguen

Professor @ University of Rennes , ESIR , IETR CNRS , Brittany Region ,
France

PyLayers Keywords
-----------------


-  Python scientific framework
-  Ray Tracing
-  Electromagnetism
-  Indoor Radio Propagation Modelling
-  Impulse Radio Ultra Wide Band IR-UWB (IEEE 802.15.4a)
-  Efficient handling of antenna patterns for UWB scenario
-  Indoor Localisation
-  Exploiting Multi Path Components (MPC) for positioning
-  Cooperative Positioning
-  Robust Geometric Positioning Algorithm (RGPA)
-  Radio channel modeling (site specific and statistical)
-  Channel Sounding
-  MIMO channel
-  PHY/MAC/NET
-  Wireless Body Area Network (IEEE 802.15.6)
-  Human mobility simulation
-  Motion capture


Warnings
--------


This documentation is generated automatically with sphinx from the
PyLayers source code files on github
(https://github.com/pylayers/pylayers). It contains at that stage a
significant number of typos, wrong english expressions, and unfinished
examples and unsufficiently explained features which remains in the
source code. The collection of notebooks is used as a complementary
battery of tests using `runipy <https://pypi.python.org/pypi/runipy>`_.

It is expected that the magic of ``git`` (an other gi(f)t from Linus
Torvalds) will gradually improves this document and the code at the same
time.

Nothing here is warantee, nothing should be taken for granted. This
document is by far not sufficiently peer reviewed at that time to have
reach a sufficient level of quality. Is is expected that there exist out
there engineers and scientists interested by the endeavour and curious
to have a try, provide feed back and contribute to the necessary
continuous improvement of the PyLayers platform.

So, if you see any wrong assertion or have seen any thing that could be
improved, please do not hesitate to provide a feed back on the `issue
page of the
project <https://github.com/pylayers/pylayers/issues?milestone=1&state=open>`_

If you find any bug, please keep preciously track of it in a notebook
and ``gist`` it and send the link on the issue page.

PyLayers developpers are not experts in computer science, sorry for
that, but are keen to learn more simple and efficient (== pythonic)
manners to do things. So any feedback from Python soldiers, gurus,
shamans, masters, wizzards is more than welcome for any suggestions of
improvement about the source code.

If you have any interest to be involved and participate to the
``PyLayers`` journey, the best way is to open a github account and to
fork the project on your own machine. Use the tool for your own studies
and needs and provide feedback to the project with a **pull request**,
if you wish ...

How to install PyLayers ?
-------------------------


PyLayers is developped on Linux platform. If you are working on a
Windows platform and you are not familiar with the Python ecosystem, a
good idea is to install first
`Anaconda <https://store.continuum.io/cshop/anaconda/>`_. It provides
you most of the required dependencies.

Dependencies
~~~~~~~~~~~~

::

    Before to install pylayers you need to install the following dependencies 


    numpy>=1.6.1
    scipy>=0.10.1
    networkx>=1.7
    matplotlib>=1.1.0
    shapely>=1.2.14
    descartes>=1.0
    SimPy>=2.2
    PIL>=1.1.5
    bitstring>=3.0.2
    pyintervall>=1.0
    pandas >=0.12.0

    The installation of matplotlib basemap requires installation of libraries GEOS
    and PROJ4. The installation procedure is well described in

http://matplotlib.org/basemap/users/installing.html

::

    For supporting the osm format PyLayers is relying on imposm. The installation 
    of imposm is not straighforward it requires to install first Tokyo-Cabinet
    and Google-Protobuf library. PyLayers can work without imposm you need to 
    comment the only import to the module in pylayers/gis/osmparser.py. 

http://imposm.org/docs/imposm/latest/install.html#id1

::

    Most of these dependencies are handled in the setup.py script.

    python setup.py install

Setting of environment variables $BASENAME and $PYLAYERS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    It is required to define the two enviroment variables $PYLAYERS and $BASENAME

    in your .bashrc add those 2 lines 

    #export PYLAYERS = <path to the directory where pylayers is installed>

    for example if you install PyLyers in your home directory 

    export PYLAYERS=~/pylayers
    export BASENAME=~/plproject

Installing PyInterval
~~~~~~~~~~~~~~~~~~~~~

::

    get crlibm library first 
    http://lipforge.ens-lyon.fr/frs/?group_id=8&release_id=123

    if problem for compilation add 
    CPPFLAGS= -fPIC in scs_lib/Makefile

    sudo easy_install pyinterval

Testing
~~~~~~~

make test-code
