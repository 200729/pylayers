
Description of the propagation environment
==========================================

.. code:: python

    
.. code:: python

    from pylayers.gis.layout import *
    from IPython.display import Image
    
    import os
Getting the list of all available Layouts : the ``ls()`` method
---------------------------------------------------------------

The ``ls()`` method lists the layout file which are available in the
``struc`` directory of the current project.

.. code:: python

    L=Layout()
    L.ls()



.. parsed-literal::

    ['11D-E1.ini',
     'DLR.ini',
     'DLR2.ini',
     'Lstruc.ini',
     'TA-Office.ini',
     'W2PTIN.ini',
     'WHERE1.ini',
     'creationPiece_09_SceneInitiale.ini',
     'defstr.ini',
     'defstr3.ini',
     'example.ini',
     'klepal.ini',
     'mokadem.ini',
     'newfm.ini',
     'w2ptin.ini',
     'where1.ini']



.. code:: python

    L.ls(typ='osm')



.. parsed-literal::

    ['DLR.osm', 'DLR2.osm', 'where1.osm']



.. code:: python

    L=Layout('DLR.osm')

.. code:: python

    L.Gs.node[1]



.. parsed-literal::

    {'name': 'WALL',
     'norm': array([-0.52106509, -0.85351694,  0.        ]),
     'transition': False,
     'z': ('0.0', '3.0')}



.. code:: python

    L.saveosm('DLR.osm')
.. code:: python

    Image('../../../data/struc/images/TA-Office.png')



.. image:: DEV-Layout_files/DEV-Layout_10_0.png



.. code:: python

    fig,ax=L.showGs()


.. image:: DEV-Layout_files/DEV-Layout_11_0.png


.. code:: python

    L=Layout('TA-Office.ini')
.. code:: python

    L.showGs()



.. parsed-literal::

    (<matplotlib.figure.Figure at 0x481ad10>,
     <matplotlib.axes.AxesSubplot at 0x48279d0>)




.. image:: DEV-Layout_files/DEV-Layout_13_1.png


.. code:: python

    L=Layout('11D-E1.ini')
    L



.. parsed-literal::

    
    ----------------
    11D-E1.ini
    ----------------
    
    Number of points  : 204
    Number of segments  : 190
    Number of sub segments  : 0
    Number of cycles  : 0
    Number of rooms  : 0
    degree 0 : []
    degree 1 : [-214 -213 -212 -211 -210 -206 -204 -202 -201 -200 -198 -197 -196 -195 -194
     -193 -191 -188 -184 -183 -182 -179 -178 -177 -175 -174 -172 -171 -167 -166
     -164 -162 -161 -156 -154 -152 -150 -148 -147 -145 -144 -142 -140 -139 -137
     -135 -134 -132 -130 -129 -128 -126 -124 -123 -122 -120 -118 -116 -115 -113
     -112 -110 -109 -107 -105 -103 -102 -100  -98  -96  -94  -92  -90  -88  -87
      -85  -80  -78  -75  -73  -71  -70  -68  -67  -65  -63  -62  -59  -57  -55
      -54  -52  -51  -49  -48  -46  -43  -41  -40  -39  -37  -36  -33  -31  -30
      -28  -25  -24  -21  -20  -18  -15  -13  -12  -10   -9   -8   -7   -6   -5
       -4   -3]
    degree 2 : 14
    degree 3 : 42
    degree 4 : [-190 -185 -181 -176 -170 -163 -149 -143 -138 -131 -127 -121 -114 -108 -101
      -79  -72  -66  -53  -50  -38  -35  -22  -19  -14  -11]
    
    xrange :(-2.536, 73.369)
    yrange :(-0.096, 15.004)
    
    Useful dictionnaries
    ----------------
    sl {slab name : slab dictionary}
    name :  {slab :seglist} 
    
    Useful arrays
    ----------------
    tsg : get segment index in Gs from tahe
    isss :  sub-segment index above Nsmax
    tgs : get segment index in tahe from Gs
    lsss : list of segments with sub-segment
    sla : list of all slab names (Nsmax+Nss+1)
    degree : degree of nodes 



.. code:: python

    L.showG('s',figsize=(20,10))



.. parsed-literal::

    (<matplotlib.figure.Figure at 0x7f340a4b0b90>,
     <matplotlib.axes.AxesSubplot at 0x7f340a4c9410>)




.. image:: DEV-Layout_files/DEV-Layout_15_1.png


.. code:: python

    L=Layout('klepal.ini')
    L

.. parsed-literal::

    problem to construct geomfile




.. parsed-literal::

    
    ----------------
    klepal.ini
    Image('/home/uguen/Bureau/P1/struc/images/IMG-Layout-Klepal.png')
    ----------------
    
    Number of points  : 54
    Number of segments  : 67
    Number of sub segments  : 0
    Number of cycles  : 0
    Number of rooms  : 0
    degree 0 : [-85 -84 -79 -32]
    degree 1 : []
    degree 2 : 23
    degree 3 : 20
    degree 4 : [-69 -68 -67 -66 -65 -64 -42]
    
    xrange :(0.043999999999999997, 48.914999999999999)
    yrange :(0.14499999999999999, 14.205)
    
    Useful dictionnaries
    ----------------
    sl {slab name : slab dictionary}
    name :  {slab :seglist} 
    
    Useful arrays
    ----------------
    tsg : get segment index in Gs from tahe
    isss :  sub-segment index above Nsmax
    tgs : get segment index in tahe from Gs
    lsss : list of segments with sub-segment
    sla : list of all slab names (Nsmax+Nss+1)
    degree : degree of nodes 



This Layout is still in construction

.. code:: python

    L.showGs()



.. parsed-literal::

    (<matplotlib.figure.Figure at 0x4c78690>,
     <matplotlib.axes.AxesSubplot at 0x7f34093551d0>)




.. image:: DEV-Layout_files/DEV-Layout_18_1.png


.. code:: python

    L=Layout('W2PTIN.ini')
.. code:: python

     L.showGs()



.. parsed-literal::

    (<matplotlib.figure.Figure at 0x7f340a4c9310>,
     <matplotlib.axes.AxesSubplot at 0x4c94c50>)




.. image:: DEV-Layout_files/DEV-Layout_20_1.png


The useful numpy arrays of the Layout
-------------------------------------

``pt`` the array of points
--------------------------

point coordinates are stored in two places :

::

    L.Gs.pos : in a dictionnary form (key is the point negative index) 
    L.pt : in a numpy array

.. code:: python

    print np.shape(L.pt)
    print len(filter(lambda x: x<0,L.Gs.pos))

.. parsed-literal::

    (2, 185)
    185


This dual storage is chosen (temporarily ? ) for computational
efficiency reason. The priority goes to the graph and the numpy array is
calculated at the end of the edition in the ``Layout.g2npy`` method
(graph to numpy) which is in charge of the conversion.

tahe (tail-head)
~~~~~~~~~~~~~~~~

``tahe`` is a :math:`(2\times N_{s})` where :math:`N_s` denotes the
number of segment. The first line is the tail index of the segment
:math:`k` and the second line is the head of the segment :math:`k`.
Where :math:`k` is the index of a given segment (starting in 0).

``tgs`` : trancodage from graph indexing to numpy array indexing
----------------------------------------------------------------

``tgs`` is an arry with length :math:`N_s`\ +1. The index 0 is not used
because none segment has 0 as an index.

.. code:: python

    ns = 5
    utahe = L.tgs[ns]
.. code:: python

    tahe =  L.tahe[:,utahe]
.. code:: python

    ptail = L.pt[:,tahe[0]]
    phead = L.pt[:,tahe[1]]
.. code:: python

    print ptail

.. parsed-literal::

    [ 29.785   6.822]


.. code:: python

    print phead 

.. parsed-literal::

    [ 27.414   6.822]


.. code:: python

    L.Gs.node[5]



.. parsed-literal::

    {'connect': [-8, -139],
     'name': 'PARTITION',
     'ncycles': [35],
     'norm': array([ 0., -1.,  0.]),
     'transition': False,
     'z': (0, 3.0)}



.. code:: python

    print L.Gs.pos[-8]
    print L.Gs.pos[-139]

.. parsed-literal::

    (29.785, 6.822)
    (27.414, 6.822)


.. code:: python

    aseg = np.array([4,7,134])
.. code:: python

    print np.shape(aseg)

.. parsed-literal::

    (3,)


.. code:: python

    pt  = L.tahe[:,L.tgs[aseg]][0,:]
    ph = L.tahe[:,L.tgs[aseg]][1,:]
    pth = np.vstack((pt,ph))
.. code:: python

    np.shape(pth)



.. parsed-literal::

    (2, 3)



``Layout.seg2pts`` a function for getting points coordinates from segment number array
--------------------------------------------------------------------------------------

.. code:: python

    L.seg2pts(aseg)



.. parsed-literal::

    array([[ 29.785,   0.044,  22.538],
           [  6.822,  23.078,   8.711],
           [ 29.785,  -3.754,  20.326],
           [  8.921,  23.078,   8.693]])



.. code:: python

    aseg = array(filter(lambda x: x>0,L.Gs.nodes()))
    pth = L.seg2pts(aseg)
.. code:: python

    from pylayers.util.plotutil import displot
.. code:: python

    displot(pth[0:2,:],pth[2:,:])



.. parsed-literal::

    (<matplotlib.figure.Figure at 0x4c97690>,
     <matplotlib.axes.AxesSubplot at 0x7f3409269990>)




.. image:: DEV-Layout_files/DEV-Layout_45_1.png

