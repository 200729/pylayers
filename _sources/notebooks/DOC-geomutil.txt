**Geomutil** is a module which gathers different geometrical functions
used in other modeule of pylayers.

The importation is done as below. The geoutil alias is *geu*


.. code-block:: python

    from pylayers.util.geomutil import *
    import shapely.geometry as shg

Class Polygon
=============

The Polygon class is a subclass of the shapely polygon class. It allows
to initialize a Polygon with different object
(list,np.array,sh.MultiPoint)


.. code-block:: python

    points = shg.MultiPoint([(0, 0), (1, 1), (2, 0), (1, 0),(0,-2)])
    poly1 = Polygon(points)
    poly2 = Polygon(p=[[3,4,4,3],[1,1,2,2]])
    N = 7
    phi = np.linspace(0,2*np.pi,N)
    x = 3*np.cos(phi)+5
    y = 3*np.sin(phi)+5
    nppoints  = np.vstack((x,y))
    poly3  = Polygon(nppoints)

ploting polygons
----------------


.. code-block:: python

    axis('off')
    axis('equal')
    poly1.plot(color='green')
    poly2.plot(color='red')
    poly3.plot(color='#000000')


.. parsed-literal::

    (<matplotlib.figure.Figure at 0x403f150>,
     <matplotlib.axes.AxesSubplot at 0x3ed4110>)


.. image:: DOC-geomutil_files/_fig_02.png

.. image:: DOC-geomutil_files/_fig_04.png

.. image:: DOC-geomutil_files/_fig_06.png

.. image:: DOC-geomutil_files/_fig_08.png

buildGv 
--------

Dertermine visibility relationships in a Polygon. Returns a graph

This function is used for determining visibility relationships in indoor
environement.


.. code-block:: python

    figsize(8,8)
    points  = shg.MultiPoint([(0, 0), (0, 1), (2.5,1), (2.5, 2), \
                                              (2.8,2), (2.8, 1.1), (3.2, 1.1), \
                                              (3.2, 0.7), (0.4, 0.7), (0.4, 0)])
    polyg   = Polygon(points)
    Gv      = polyg.buildGv(show=True)
    plt.axis('off')
    



.. parsed-literal::

    (-0.5, 4.0, -0.5, 2.5)


.. image:: DOC-geomutil_files/_fig_11.png

Geomview classes
================

GeomVect class
--------------

This class is used to interact with geomview 3D viewer.

geomBase
~~~~~~~~

Display a base


.. code-block:: python

    v1 = np.array([1,0,0])
    v2 = np.array([0,1,0])
    v3 = np.array([0,0,1])
    M  = np.vstack((v1,v2,v3))
    gv = GeomVect('test')
    gv.geomBase(M)
    gv.show3()

points
~~~~~~

display a set of points


.. code-block:: python

    gv1 = GeomVect('test1')
    gv1.points(rand(3,10))
    gv1.show3()

ndarray method converts a Polygon object to an ndarray


.. code-block:: python

    geo = Geomoff('test2')
    pt  = poly3.ndarray().T
    pt1 = np.hstack((pt,np.zeros((7,1))))


This class is used in module vrml2geom


.. code-block:: python

    polys = [[0,1,2,3,4,5,6]]
    geo.polygons(pt1,polys)
    geo.show3()


.. code-block:: python

    poly = [0,1,2,3,4,5,6]
    geo.polygon(pt1,poly)
    geo.show3()


.. code-block:: python

    np.zeros((7,1))


.. code-block:: python

    extrem=np.array([-2,2,-2,2,-2,2])

plotting a box 
---------------


.. code-block:: python

    geo=Geomoff('test3')
    geo.box()


.. code-block:: python

    geo.show3()

angledir
--------

angledir converts a 3D vector into the 2 spherical angle
:math:`$\theta$`, :math:`$\phi$` expressed in radians


.. code-block:: python

    s = np.array([[2,0,0],[0,2,0],[0,0,1],[1,1,1]]) 
    angledir(s)*180/pi


.. parsed-literal::

    array([[ 90.        ,   0.        ],
           [ 90.        ,  90.        ],
           [  0.        ,   0.        ],
           [ 54.73561032,  45.        ]])


linet
-----


.. code-block:: python

    fig = figure()
    axis('off')
    ax = fig.gca()
    p1 = np.array([0,0])
    p2 = np.array([1,0])
    p3 = np.array([0,1])
    p4 = np.array([1,1])
    ax = linet(ax,p1,p2,al=0.7,color='red',linewidth=3)
    ax = linet(ax,p2,p3,al=0.8,color='blue',linewidth=2)
    ax = linet(ax,p3,p4,al=0.9,color='green',linewidth=1)
    ax = linet(ax,p4,p1,al=1,color='cyan',linewidth=10)

.. image:: DOC-geomutil_files/_fig_14.png

dptseg(p,pt,ph)
---------------

this function calculates distances between a set of points and a segment


.. code-block:: python

    pt = np.array([0,0])
    ph = np.array([10,0])
    p  = np.array([[-1,1 ,3,4,11],[8,1,2,3,3]])
    d1,d2,h = dptseg(p,pt,ph)



.. code-block:: python

    print d1,d2,h


.. parsed-literal::

    [[ -1.   1.   3.   4.  11.]] [[ 11.   9.   7.   6.  -1.]] [ 8.  1.  2.  3.  3.]

displot

--------


.. code-block:: python

    axis('off')
    axis('equal')
    N   = 50
    pt  = sp.rand(2,N)
    ph  = sp.rand(2,N)
    f,a = displot(pt,ph)

.. image:: DOC-geomutil_files/_fig_16.png

ptonseg(pta,phe,pt)

--------------------

used in select.py


.. code-block:: python

    pta = np.array([0,0])
    phe = np.array([10,0])
    pt = np.array([9,8])
    p = ptonseg(pta,phe,pt)
    print p


.. parsed-literal::

    [ 9.  0.]

ptconvex
--------


.. code-block:: python

    points  = shg.MultiPoint([(0, 0), (0, 1), (3.2, 1), (3.2, 0.7), (0.4, 0.7), (0.4, 0)])
    N = len(points)
    polyg   = Polygon(points)
    tcc,n   = polyg.ptconvex()       


.. code-block:: python

    axis('off')
    axis('equal')
    k = 0
    for p in points:
        if tcc[k] == 1 :
            plt.plot(p.x, p.y, 'o', color='red',alpha=1)
        else:
            plt.plot(p.x, p.y, 'o', color='blue',alpha=0.3)
        k = k+1
    polyg.plot()
    


.. image:: DOC-geomutil_files/_fig_18.png

