This section explains some features of the class **Layout**. Layouts are
handled by the module **pylayers.gis.layout**


.. code-block:: python

    from pylayers.gis.layout import *

.. parsed-literal::

    <matplotlib.figure.Figure at 0x40caa10>

To create a new layout :


.. code-block:: python

    L=Layout('layout.ini')

At that stage the layout file is void


.. code-block:: python

    L.info()


.. parsed-literal::

    filestr :  layout.ini
    filematini :  matDB.ini
    fileslabini :  slabDB.ini
    filegeom :  geomfile (.off) has no been generated
    limites  (-20.0, 20.0, -10.0, 10.0)
    number of Nodes : 0
    number of Segments : 0
    number of Sub-Segments : 0
    Gs Nodes :  0
    Gs Edges :  0
    Gc Nodes :  0
    Gc Edges :  0
    Gt Nodes :  0
    Gt Edges :  0
    vnodes = Gt.node[Nc]['cycles'].cycle 
    poly = Gt.node[Nc]['cycle'].polyg 
    Gr Nodes    : no Gr graph

The display options dictionnary 
--------------------------------

The layout can be displayed using matplotlib ploting primitive. Several
display options are specified in the display dictionnary.


.. code-block:: python

    L.display


.. parsed-literal::

    {'activelayer': 'WINDOW_GLASS',
     'alpha': 0.5,
     'box': (-20, 20, -10, 10),
     'clear': False,
     'edges': True,
     'edlabel': False,
     'edlblsize': 20,
     'ednodes': False,
     'fileoverlay': 'TA-Office.png',
     'fontsize': 20,
     'layer': [],
     'layers': [],
     'layerset': ['WINDOW_GLASS',
      'PLASTERBOARD_7CM',
      'WALL',
      'AIR',
      'WINDOW',
      'METALIC',
      'PLASTERBOARD_14CM',
      'DOOR',
      'FLOOR',
      'METAL',
      'PARTITION',
      'CONCRETE_20CM3D',
      'PLASTERBOARD_10CM',
      'CEIL',
      'CONCRETE_6CM3D',
      'CONCRETE_15CM3D',
      '3D_WINDOW_GLASS',
      'WALLS',
      'WOOD',
      'CONCRETE_7CM3D',
      'PILLAR',
      'ABSORBENT'],
     'ndlabel': False,
     'ndlblsize': 20,
     'ndsize': 10,
     'nodes': False,
     'overlay': False,
     'scaled': True,
     'subseg': True,
     'thin': False,
     'ticksoff': True,
     'title': '',
     'visu': False}


Layers
~~~~~~

-  'layer' : list , []
-  'layerset',list, list of available layers
-  'layers', list , []
-  'activelayer', str , 'WINDOW\_GLASS'

-  'alpha', float , 0.5 , overlay transparency
-  'box', tuple , (-20,20,-10,10), (xmin xmax,ymin,ymax)



Strings
~~~~~~~

-  'title' : str , 'Init'
-  'fileoverlay' : str , 'TA-Office.png'


Sizes
~~~~~

-  'fontsize', float , 10
-  'ndsize', float , 10
-  'ndlblsize' : float 20
-  'edlblsize' : float , 20


Booleans 
~~~~~~~~~

-  'edlabel', boolean, False
-  'ticksoff',boolean, True
-  'scaled' : boolean , True
-  'subseg' : boolean , True
-  'nodes', boolean , True
-  'visu', boolean , False
-  'edges', boolean , True
-  'clear', boolean, False
-  'overlay', boolean , False
-  'thin', boolean , False , If True trace all segments with thickness 1
-  'ndlabel',boolean, If True display node labels
-  'ednodes', boolean, True


Interactive editor
------------------

The command L.editor() launches an interactive editor

Edition mode
------------

There are two different modes of edition

-  A create points mode CP

   -  left clic : free point
   -  right clic : same x point
   -  center clic : same y point

-  A create segments mode

   -  left clic : select point 1
   -  left clic : select point 2
   -  left clic : create a segment between point 1 and point 2

**m** : to switch from one mode to an other

**i** : to return to init state

Image overlay
-------------

It is useful while editing a layout to have an overlay of an image in
order to help placing points. The image overlay can either be an url or
a filename. In that case the file is stored in


.. code-block:: python

    L.display['fileoverlay']='http://images.wikia.com/theoffice/images/9/9e/Layout.jpg'


.. code-block:: python

    L.display['overlay']=True
    L.display['alpha']=1
    L.display['scaled']=False
    L.display['ticksoff']=False


.. code-block:: python

    figsize(10,10)
    L.showGs()


.. parsed-literal::

    (<matplotlib.figure.Figure at 0x7f3df01848d0>,
     <matplotlib.axes.AxesSubplot at 0x4129910>)


.. image:: DOC-LayoutEditor_files/_fig_05.png

Scaling the figure overlay
--------------------------

Before going further it is necessary :

-  to place the global origin
-  to precise the vertical and horizontal scale of the image

This is done by the following commands :

-  'i' : back to init state
-  'm' : goes to CP state
-  'o' : define the origin
-  'left click' on the point of the figure chasen as the origin
-  'left click' on a point at a known distance from the origin along x
   axis. Fill the dialog box with the actual distance (expressed in
   meters) between the two points.
-  'left click' on a point at a known distance from the origin along y
   axis. Fill the dialog box with the actual distance (expressed in
   meters) between the two points.

In that sequence of operation it is useful to rescale the figure with
'r'.

At that stage, it is possible to start creating points

::

        'b'  : selct a segment 
        'l'  : select activelayer
        'i'  : back to init state
        'e'  : edit segment
        't'  : translate  structure
        'h'  : add subsegment
        'd'  : delete subsegment
        'r'  : refresh
        'o'  : toggle overlay
        'm'  : toggle mode (point or segment)
        'z'  : change display parameters
        'q'  : quit interactive mode
        'x'  : save .str2 file
        'w'  : display all layers


Vizualisation of the layout
---------------------------


.. code-block:: python

    L = Layout('TA-Office.ini')
    L.dumpr()
    fig = plt.figure(figsize=(25,25))
    ax = fig.gca()
    fig,ax = L.showG(fig=fig,ax=ax,graph='s',labels=True,font_size=9,node_size=220,node_color='c')
    a = plt.axis('off')

.. image:: DOC-LayoutEditor_files/_fig_07.png

Each node of :math:`$\mathcal{G}_s$` with a negative index is a point.

Each node of :math:`$\mathcal{G}_s$` with a positive index corresponds
to a segment (Wall,door,window,...).

The segment name is the key of the **slab** dictionnary.

Segments and Subsegments
------------------------

It is very important to respect a strict non overlapping rules. No
segments can recover partially or totally an other segment. This rules
allows to capture topological relation of the network which are
exploited for further analysis.

To describe door and window, the concept of subsegment is used. A
subsegment belongs to a segment, it has mainly 3 attached parameters + A
slab name + zmin (meter) + zmax (meter)

Currently, it is not possible to define multi-subsegments. for example a
composite door with wood and glass. This a desirable feature to add for
future version of PyLayers.

