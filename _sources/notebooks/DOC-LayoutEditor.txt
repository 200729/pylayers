Introduction
------------

This section explains the main features of the **Layout** class.

A Layout is a representation of a floorplan, it is handled by the module
**pylayers.gis.layout**.

This module recognizes different file formats including geo-referenced
files in open street map format ``.osm``.

Using osm is interesting because it gives access to a huge geo database,
and particularly it allows to take advantage of a mature floor plan
editor *JOSM* with the plugin *PicLayer*. This is well described in
http://wiki.openstreetmap.org/wiki/IndoorOSM

The ``pylayers.gis.osmparser`` module parses ``osm`` files.

See the following methods of the layout object

-  ``loadosm()``
-  ``saveosm()``


Structure of the Layout
-----------------------

At first a Layout is described by a set of points (negative index) and a
set of segments (positive index).

Points and segments are nodes of the :math:`$\mathcal{G}_s$` graph.

It is required to respect a strict non overlapping rule. **No segments
can recover partially or totally an other segment**.

This rule allows to capture topological relations of the network which
are exploited for further analysis.

Subsegments
~~~~~~~~~~~

To describe doors and windows, the concept of ``subsegment`` is
introduced.

A ``subsegment`` belongs to a ``segment``, it has mainly 3 attached
parameters :

-  A slab name
-  zmin (meter)
-  zmax (meter)

:math:`$N_{ss}[k] = M_s + M_{ss} N_s + k$`

:math:`$M_{s}$` and :math:`$M_{ss}$` are respectively the maximum number
of segments and the maximum number of subsegment per segment.

Those two values are embedded in the layout file.

The different layout format 
----------------------------

The layout format has evolved a lot over time and is going to evolve
again. The different recognized file extensions are the following :

-  ``.str2``: a ASCII file (Node list + edge list)
-  ``.str`` : a binary file which includes visibility relations between
   point and segments
-  ``.ini`` : an ini file which gather node list and edge list as well
   as the state of the current ``display`` dictionnary
-  ``.osm`` : an xml file which can be edited with JOSM
   http://josm.openstreetmap.de/



.. code-block:: python

    from pylayers.gis.layout import *
    from pylayers.util.project import *

.. parsed-literal::

    <matplotlib.figure.Figure at 0x474b250>

Reading an existing Layout
--------------------------

To read an existing layout it is sufficient to create a Layout object
with, as an argument, a file name with one of the recognized extension.
All files are stored in the ``pstruc['DIRSTRUC']`` directory of the
project. The project root directory is defined in the ``$BASENAME``
environment variable.


.. code-block:: python

    print pstruc['DIRSTRUC']


.. parsed-literal::

    struc

``pstruc`` is a dictionnary which gathers all directories which are used
in ``PyLayers``


.. code-block:: python

    pstruc


.. parsed-literal::

    {'DIRANT': 'ant',
     'DIRCIR': 'output',
     'DIRFUR': 'struc/furnitures',
     'DIRGEOM': 'geom',
     'DIRLCH': 'output',
     'DIRMAT': 'ini',
     'DIRMAT2': 'ini',
     'DIRMES': 'meas',
     'DIRNETSAVE': 'netsave',
     'DIRSIMUL': 'ini',
     'DIRSLAB': 'ini',
     'DIRSLAB2': 'ini',
     'DIRSTRUC': 'struc',
     'DIRSTRUC2': 'struc',
     'DIRTRA': 'output',
     'DIRTUD': 'output'}


The structure of the ``.osm`` file is shown below


.. code-block:: python

    %%bash 
    
        cd $BASENAME/struc
        ls *.osm



.. parsed-literal::

    11D-E1.osm
    11D.osm
    DLR.osm
    where1.osm


.. code-block:: python

    %%bash 
        cd $BASENAME/struc
        head DLR.osm
        echo '---'
        tail -17 DLR.osm


.. parsed-literal::

    <?xml version='1.0' encoding='UTF-8'?>
    <osm version='0.6' upload='False' generator='JOSM'>
      <node id='-212' action='modify' visible='True' lat='48.084786570023745' lon='11.27779169137997' />
      <node id='-210' action='modify' visible='True' lat='48.08477983698066' lon='11.277807970757943' />
      <node id='-208' action='modify' visible='True' lat='48.08477470372689' lon='11.277820382088898' />
      <node id='-206' action='modify' visible='True' lat='48.08476292533722' lon='11.277769777676356' />
      <node id='-204' action='modify' visible='True' lat='48.08485956769662' lon='11.27777543967586' />
      <node id='-202' action='modify' visible='True' lat='48.08486676516895' lon='11.277782110228287' />
      <node id='-200' action='modify' visible='True' lat='48.08488518369812' lon='11.277821870499377' />
      <node id='-198' action='modify' visible='True' lat='48.08488036457005' lon='11.277775932263998' />
    ---
      <way id='-216' action='modify' visible='True'>
        <nd ref='-8' />
        <nd ref='-118' />
        <tag k='name' v='WALL' />
        <tag k='transition' v='False' />
        <tag k='zmax' v='3.0' />
        <tag k='zmin' v='0.0' />
      </way>
      <way id='-214' action='modify' visible='True'>
        <nd ref='-4' />
        <nd ref='-6' />
        <tag k='name' v='WALL' />
        <tag k='transition' v='False' />
        <tag k='zmax' v='3.0' />
        <tag k='zmin' v='0.0' />
      </way>
    </osm>

To read a new layout in osm format :


.. code-block:: python

    L=Layout('DLR.osm')


.. code-block:: python

    fig,ax=L.showGs()

.. image:: DOC-LayoutEditor_files/_fig_06.png


.. code-block:: python

    L.info()


.. parsed-literal::

    filestr :  DLR.osm
    filematini :  matDB.ini
    fileslabini :  slabDB.ini
    filegeom :  DLR.off
    boundaries  (742.96390126943857, 779.36807532009323, 1111.8981215904842, 1139.1207102126)
    number of Nodes : 105
    number of Segments : 124
    number of Sub-Segments : 30
    Gs Nodes :  229
    Gs Edges :  248
    Gt Nodes :  0
    Gt Edges :  0
    vnodes = Gt.node[Nc]['cycles'].cycle 
    poly = Gt.node[Nc]['cycle'].polyg 
    Gr Nodes    : no Gr graph

The different graphs associated with the layout are then built


.. code-block:: python

    L.build()


.. parsed-literal::

    WARNING:root:punctual contact detected proceed in reverse order

The topological graph :math:`$\mathcal{G}_t$` or graph of non
overlapping cycles.


.. code-block:: python

    f,a=L.showG('t')
    b=axis('off')

.. image:: DOC-LayoutEditor_files/_fig_10.png

The graph of room :math:`$\mathcal{G}_r$`. Two rooms which share at
least a wall are connected. Two rooms which share only a corner
(punctual connection) are not connected


.. code-block:: python

    f,a=L.showG('r')
    b=axis('off')

.. image:: DOC-LayoutEditor_files/_fig_12.png

The graph of waypath :math:`$\mathcal{G}_w$`. This graph is used for
agent mobility. This allows to determine the shortest path between 2
rooms. This information could be included in the osm file. This is not
the case yet


.. code-block:: python

    f,a=L.showG('w')
    b=axis('off')

.. image:: DOC-LayoutEditor_files/_fig_14.png

The graph of visibility :math:`$\mathcal{G_v}$`


.. code-block:: python

    f,a=L.showG('v')
    b=axis('off')

.. image:: DOC-LayoutEditor_files/_fig_16.png

The graph of interactions :math:`$\mathcal{G}_i$` used to dertermine the
ray signatures.


.. code-block:: python

    f=figure(figsize=(15,15))
    a = f.gca()
    f,a=L.showG('i',fig=f,ax=a)
    b=axis('off')

.. image:: DOC-LayoutEditor_files/_fig_18.png

The display options dictionnary 
--------------------------------


.. code-block:: python

    L.info()


.. parsed-literal::

    filestr :  DLR.osm
    filematini :  matDB.ini
    fileslabini :  slabDB.ini
    filegeom :  DLR.off
    boundaries  (742.96390126943857, 779.36807532009323, 1111.8981215904842, 1139.1207102126)
    number of Nodes : 105
    number of Segments : 124
    number of Sub-Segments : 30
    Gs Nodes :  229
    Gs Edges :  248
    Gt Nodes :  20
    Gt Edges :  48
    vnodes = Gt.node[Nc]['cycles'].cycle 
    poly = Gt.node[Nc]['cycle'].polyg 
    Gr Nodes    : 16
    Gr Edges    : 16
    Nc  = Gr.node[nroom]['cycles']  

The layout can be displayed using matplotlib ploting primitive. Several
display options are specified in the display dictionnary. Those options
are exploited in ``showGs()`` vizualisation method.


.. code-block:: python

    L.display


.. parsed-literal::

    {'activelayer': 'WINDOW_GLASS',
     'alpha': 0.5,
     'box': (-20, 20, -10, 10),
     'clear': False,
     'edges': True,
     'edlabel': False,
     'edlblsize': 20,
     'ednodes': False,
     'fileoverlay': 'TA-Office.png',
     'fontsize': 20,
     'inverse': False,
     'layer': [],
     'layers': ['WALL', 'PARTITION', '3D_WINDOW_GLASS', 'AIR'],
     'layerset': ['WINDOW_GLASS',
      'PLASTERBOARD_7CM',
      'WALL',
      'AIR',
      'WINDOW',
      'METALIC',
      'PLASTERBOARD_14CM',
      'DOOR',
      'FLOOR',
      'METAL',
      'PARTITION',
      'CONCRETE_20CM3D',
      'PLASTERBOARD_10CM',
      'CEIL',
      'CONCRETE_6CM3D',
      'CONCRETE_15CM3D',
      '3D_WINDOW_GLASS',
      'WALLS',
      'WOOD',
      'CONCRETE_7CM3D',
      'PILLAR',
      'ABSORBENT'],
     'ndlabel': False,
     'ndlblsize': 20,
     'ndsize': 10,
     'nodes': False,
     'overlay': False,
     'scaled': True,
     'subseg': True,
     'thin': False,
     'ticksoff': True,
     'title': '',
     'visu': False}


Layers
~~~~~~

-  'layer' : list , []
-  'layerset',list, list of available layers
-  'layers', list , []
-  'activelayer', str , 'WINDOW\_GLASS'

-  'alpha', float , 0.5 , overlay transparency
-  'box', tuple , (-20,20,-10,10), (xmin xmax,ymin,ymax)



Strings
~~~~~~~

-  'title' : str , 'Init'
-  'fileoverlay' : str , 'TA-Office.png'


Sizes
~~~~~

-  'fontsize', float , 10
-  'ndsize', float , 10
-  'ndlblsize' : float 20
-  'edlblsize' : float , 20


Booleans 
~~~~~~~~~

-  'edlabel', boolean, False
-  'ticksoff',boolean, True
-  'scaled' : boolean , True
-  'subseg' : boolean , True
-  'nodes', boolean , True
-  'visu', boolean , False
-  'edges', boolean , True
-  'clear', boolean, False
-  'overlay', boolean , False
-  'thin', boolean , False , If True trace all segments with thickness 1
-  'ndlabel',boolean, If True display node labels
-  'ednodes', boolean, True


Interactive editor
------------------

The command L.editor() launches an interactive editor. The state machine
is implemented in module ``pylayers.gis.selectl.py``.

To have an idea of all available options, look in the
``pylayers.gis.SelectL`` module.

http://pylayers.github.io/pylayers/\_modules/pylayers/gis/selectl.html#SelectL.new\_state

All bug correction and ergonomic improvement of this editor is welcome.
Just pull request your modifications.

The interactive editor L.editor()
---------------------------------

PyLayers comes along with a low level structure editor based on
``matplotlib`` which can be invoqued using the ``editor()`` method. This
editor is more suited for modyfing constitutive properties of walls. In
the future a dedicated plugin in ``JOSM`` could be a much better
solution.

There are two different modes of edition

-  A create points mode CP

   -  left clic : free point
   -  right clic : same x point
   -  center clic : same y point

-  A create segments mode

   -  left clic : select point 1
   -  left clic : select point 2
   -  left clic : create a segment between point 1 and point 2

**m** : to switch from one mode to an other

**i** : to return to init state

Image overlay
~~~~~~~~~~~~~

It is useful while editing a layout to have an overlay of an image in
order to help placing points. The image overlay can either be an url or
a filename. In that case the file is stored in


.. code-block:: python

    L=Layout()
    L.display['fileoverlay']='http://images.wikia.com/theoffice/images/9/9e/Layout.jpg'


.. code-block:: python

    L.display['overlay']=True
    L.display['alpha']=1
    L.display['scaled']=False
    L.display['ticksoff']=False
    L.display['inverse']=True


.. code-block:: python

    figsize(10,10)
    L.showGs()


.. parsed-literal::

    (<matplotlib.figure.Figure at 0x66aedd0>,
     <matplotlib.axes.AxesSubplot at 0x5b3df90>)


.. image:: DOC-LayoutEditor_files/_fig_23.png

Scaling the figure overlay
~~~~~~~~~~~~~~~~~~~~~~~~~~

Before going further it is necessary :

-  to place the global origin
-  to precise the vertical and horizontal scale of the image

This is done by the following commands :

-  'i' : back to init state
-  'm' : goes to CP state
-  'o' : define the origin
-  'left click' on the point of the figure chasen as the origin
-  'left click' on a point at a known distance from the origin along x
   axis. Fill the dialog box with the actual distance (expressed in
   meters) between the two points.
-  'left click' on a point at a known distance from the origin along y
   axis. Fill the dialog box with the actual distance (expressed in
   meters) between the two points.

In that sequence of operation it is useful to rescale the figure with
'r'.

At that stage, it is possible to start creating points

::

        'b'  : selct a segment 
        'l'  : select activelayer
        'i'  : back to init state
        'e'  : edit segment
        't'  : translate  structure
        'h'  : add subsegment
        'd'  : delete subsegment
        'r'  : refresh
        'o'  : toggle overlay
        'm'  : toggle mode (point or segment)
        'z'  : change display parameters
        'q'  : quit interactive mode
        'x'  : save .str2 file
        'w'  : display all layers


Vizualisation of the layout
---------------------------


.. code-block:: python

    L = Layout('TA-Office.ini')
    L.dumpr()
    fig = plt.figure(figsize=(25,25))
    ax = fig.gca()
    fig,ax = L.showG(fig=fig,ax=ax,graph='s',labels=True,font_size=9,node_size=220,node_color='c')
    a = plt.axis('off')

.. image:: DOC-LayoutEditor_files/_fig_25.png

Each node of :math:`$\mathcal{G}_s$` with a negative index is a point.

Each node of :math:`$\mathcal{G}_s$` with a positive index corresponds
to a segment (Wall,door,window,...).

The segment name is the key of the **slab** dictionnary.

Segments and Subsegments
------------------------



